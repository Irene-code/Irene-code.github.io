<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01-CSS初识</title>
    <url>/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.CSS初识</p>
</blockquote>
<h1 id="CSS层叠样式表"><a href="#CSS层叠样式表" class="headerlink" title="CSS层叠样式表"></a>CSS层叠样式表</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul>
<li>理解<ul>
<li>css的目的作用</li>
<li>css的三种引入方式</li>
</ul>
</li>
<li>应用<ul>
<li>css三种引用方式的书写</li>
<li>通过样式规则给标签添加简单的样式<a id="more"></a>

</li>
</ul>
</li>
</ul>
<img src="/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/zong1.jpg">

<h1 id="1-HTML的局限性"><a href="#1-HTML的局限性" class="headerlink" title="1.HTML的局限性"></a>1.HTML的局限性</h1><p>说起HTML，这其实是个非常单纯的家伙， 他只关注内容的语义， </p>
<p>比如</p><h1>表明这是一个大标题，用<p> 表明这是一个段落，用<img> 表明这儿有一个图片， 用<a> 表示此处有链接。</a></p>
<p>很早的时候，世界上的网站虽然很多，但是他们都有一个共同的特点： <strong>丑</strong>。</p>
<p>这个是一个外国比较早的购物网站</p>
 <img src="/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/640.webp">

<p>有些人就忍受不了了，你就不能把自己打扮得漂亮一点吗？</p>
<p>HTML说，我试试…</p>
<p>如果要改变下 高度或者变一个颜色，就需要大量重复操作</p>
 <img src="/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/css.png" width="400">

<p><strong>总结：</strong></p>
<ul>
<li>HTML满足不了设计者的需求</li>
<li>操作html属性不方便</li>
<li>HTML里面添加样式带来的是无尽的臃肿和繁琐</li>
</ul>
<h1 id="2-CSS-网页的美容师"><a href="#2-CSS-网页的美容师" class="headerlink" title="2.CSS 网页的美容师"></a>2.CSS 网页的美容师</h1><ul>
<li>让我们的网页更加丰富多彩，布局更加灵活自如。   </li>
<li>CSS的最大贡献就是：  让 HTML 从样式中脱离，  实现了 HTML 专注去做 结构呈现，样式交给css </li>
</ul>
<blockquote>
<p><strong>我们理想中的结果： 结构(html)与样式(css)相分离</strong>  这句话要记住</p>
</blockquote>
<p>而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:</p>
 <img src="/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/baby.jpeg">

<h1 id="3-CSS初识"><a href="#3-CSS初识" class="headerlink" title="3.CSS初识"></a>3.CSS初识</h1><ul>
<li><p>概念：</p>
<p>​    CSS(Cascading Style Sheets)  ，通常称为CSS样式表或层叠样式表（级联样式表）</p>
</li>
<li><p>作用：</p>
<ul>
<li>主要用于<strong>设置</strong> HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及<strong>版面的布局和外观显示样式。</strong></li>
<li>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</li>
</ul>
</li>
</ul>
<h1 id="4-引入CSS样式表（书写位置）"><a href="#4-引入CSS样式表（书写位置）" class="headerlink" title="4. 引入CSS样式表（书写位置）"></a>4. 引入CSS样式表（书写位置）</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要书写css样式，那css样式书写的位置在哪呢？</span><br></pre></td></tr></table></figure>

<h2 id="4-1-行内式（内联样式）"><a href="#4-1-行内式（内联样式）" class="headerlink" title="4.1 行内式（内联样式）"></a>4.1 行内式（内联样式）</h2><ul>
<li><p>概念：</p>
<p>​    称行内样式、行间样式.</p>
<p>​    是通过标签的style属性来设置元素的样式</p>
</li>
</ul>
<ul>
<li>其基本语法格式如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;"</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上任何HTML标签都拥有style属性，用来设置行内式。</p>
<ul>
<li>案例：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div style="color: red; font-size: 12px;"&gt;青春不常在，抓紧谈恋爱&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>style其实就是标签的属性</li>
<li>样式属性和值中间是<code>:</code></li>
<li>多组属性值之间用<code>;</code>隔开。</li>
<li>只能控制当前的标签和以及嵌套在其中的字标签，造成代码冗余</li>
</ul>
</li>
<li>缺点：<ul>
<li>没有实现样式和结构相分离</li>
</ul>
</li>
</ul>
<h2 id="4-2-内部样式表（内嵌样式表）"><a href="#4-2-内部样式表（内嵌样式表）" class="headerlink" title="4.2 内部样式表（内嵌样式表）"></a>4.2 内部样式表（内嵌样式表）</h2><ul>
<li><p>概念：</p>
<p>​    称内嵌式</p>
<p>​    是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义</p>
</li>
<li><p>其基本语法格式如下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/CSS"</span>&gt;</span></span><br><span class="line">    选择器（选择的标签） &#123; </span><br><span class="line">      属性1: 属性值1;</span><br><span class="line">      属性2: 属性值2; </span><br><span class="line">      属性3: 属性值3;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">	 <span class="selector-tag">div</span> &#123;</span><br><span class="line">	 	<span class="attribute">color</span>: red;</span><br><span class="line">	 	<span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">	 &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<ul>
<li>style标签一般位于head标签中，当然理论上他可以放在HTML文档的任何地方。</li>
<li>type=”text/css”  在html5中可以省略。</li>
<li>只能控制当前的页面</li>
</ul>
</li>
<li><p>缺点：</p>
<p>  没有彻底分离</p>
</li>
</ul>
<h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">   <span class="comment">/*选择器&#123;属性:值；&#125;*/</span></span><br><span class="line">   <span class="selector-tag">p</span> &#123;</span><br><span class="line">   	  <span class="attribute">color</span>:<span class="number">#06C</span>; </span><br><span class="line">   	  <span class="attribute">font-size</span>:<span class="number">14px</span>;  </span><br><span class="line">   	&#125;  <span class="comment">/*文字的颜色是 蓝色*/</span></span><br><span class="line">   <span class="selector-tag">h4</span> &#123;</span><br><span class="line">   	 <span class="attribute">color</span>:<span class="number">#900</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-tag">h1</span> &#123;</span><br><span class="line">   	 <span class="attribute">color</span>:<span class="number">#090</span>; </span><br><span class="line">   	 <span class="attribute">font-size</span>:<span class="number">16px</span>; </span><br><span class="line">   	&#125;</span><br><span class="line">   <span class="selector-tag">body</span> &#123; </span><br><span class="line">   	 <span class="attribute">background</span>:<span class="built_in">url</span>(bg2.jpg);</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><strong>展示</strong></p>
<img src="/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/tihui.png">



<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">思考：</span><br><span class="line"> 1. 如何实现结构与样式完全分离？</span><br><span class="line"> 2. 如何实现<span class="selector-tag">css</span>样式共享？</span><br></pre></td></tr></table></figure>



<h2 id="4-3-外部样式表（外链式）"><a href="#4-3-外部样式表（外链式）" class="headerlink" title="4.3 外部样式表（外链式）"></a>4.3 外部样式表（外链式）</h2><ul>
<li><p>概念：</p>
<p>​    称链入式</p>
<p>​    是将所有的样式放在一个或多个以<strong>.CSS</strong>为扩展名的外部样式表文件中，</p>
<p>​    通过link标签将外部样式表文件链接到HTML文档中</p>
</li>
<li><p>其基本语法格式如下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css文件路径"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：  <ul>
<li>link 是个单标签</li>
<li>link标签需要放在head头部标签中，并且指定link标签的三个属性</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>rel</td>
<td align="left">定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</td>
</tr>
<tr>
<td>type</td>
<td align="left">定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。我们都可以省略</td>
</tr>
<tr>
<td>href</td>
<td align="left">定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</td>
</tr>
</tbody></table>
<img src="/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/10css外链式.jpg">

<h2 id="4-4-三种样式表总结（位置）"><a href="#4-4-三种样式表总结（位置）" class="headerlink" title="4.4 三种样式表总结（位置）"></a>4.4 三种样式表总结（位置）</h2><table>
<thead>
<tr>
<th>样式表</th>
<th>优点</th>
<th>缺点</th>
<th>使用情况</th>
<th>控制范围</th>
</tr>
</thead>
<tbody><tr>
<td>行内样式表</td>
<td>书写方便，权重高</td>
<td>没有实现样式和结构相分离</td>
<td>较少</td>
<td>控制一个标签（少）</td>
</tr>
<tr>
<td>内部样式表</td>
<td>部分结构和样式相分离</td>
<td>没有彻底分离</td>
<td>较多</td>
<td>控制一个页面（中）</td>
</tr>
<tr>
<td>外部样式表</td>
<td>完全实现结构和样式相分离</td>
<td>需要引入</td>
<td>最多，强烈推荐</td>
<td>控制整个站点（多）</td>
</tr>
</tbody></table>
<h3 id="团队约定-代码风格"><a href="#团队约定-代码风格" class="headerlink" title="团队约定-代码风格"></a>团队约定-代码风格</h3><p>样式书写一般有两种：</p>
<ul>
<li>一种是紧凑格式 (Compact)</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>一种是展开格式（推荐）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: deeppink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="团队约定-代码大小写"><a href="#团队约定-代码大小写" class="headerlink" title="团队约定-代码大小写"></a>团队约定-代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-tag">H3</span>&#123;</span><br><span class="line">	<span class="attribute">COLOR</span>: PINK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-总结CSS样式规则"><a href="#5-总结CSS样式规则" class="headerlink" title="5. 总结CSS样式规则"></a>5. 总结CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，</p>
<p>具体格式如下：                                          </p>
<img src="/2020/12/26/01-CSS%E5%88%9D%E8%AF%86/gz.png">

<p><strong>总结：</strong></p>
<ol>
<li>选择器用于指定CSS样式作用的HTML标签，花括号内是对该对象设置的具体样式。</li>
<li>属性和属性值以“键值对”的形式出现。</li>
<li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</li>
<li>属性和属性值之间用英文“:”连接。</li>
<li>多个“键值对”之间用英文“;”进行区分。</li>
</ol>
<h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="@拓展阅读"></a>@拓展阅读</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNTAzMjcxNg%3D%3D&mid=2651424749&idx=1&sn=f58bca144f50bff00ba7d1675cc8b8e7&scene=4" target="_blank" rel="noopener">CSS的发展史</a></p>
</h1>]]></content>
  </entry>
  <entry>
    <title>01-前言&amp;WEB标准</title>
    <url>/2020/12/26/01-%E5%89%8D%E8%A8%80&amp;WEB%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.认识WEB</p>
</blockquote>
<h1 id="基础班学习目标"><a href="#基础班学习目标" class="headerlink" title="基础班学习目标"></a>基础班学习目标</h1><p>目标：  能根据psd文件，用HTML+CSS 布局出符合W3C规范的网页。</p>
<a id="more"></a>
<p>网站首页</p>
<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/%E7%94%B5%E5%95%86-%E4%B8%BB%E9%A1%B5-gai.jpg" class title="图示">

<p>列表页、详情页、登录页、 注册页等等。。。。</p>
<h1 id="HTML-第一天目标"><a href="#HTML-第一天目标" class="headerlink" title="HTML 第一天目标"></a>HTML 第一天目标</h1><p>  能够写出基本的html页面（里面包含图片、链接、文字等网页元素标签）</p>
<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/a.png" class title="图示">
<h1 id="认识WEB"><a href="#认识WEB" class="headerlink" title="认识WEB"></a>认识WEB</h1><h2 id="1-认识网页"><a href="#1-认识网页" class="headerlink" title="1. 认识网页"></a>1. 认识网页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</span><br></pre></td></tr></table></figure>
<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/mi.png" class title="图示">

<p><strong>思考：</strong> </p>
<p>网页是如何形成的呢?</p>
<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/web.png" class title="图示">


<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>网页有图片、链接、文字等元素组成，我们后面的任务就是要把这部分网页元素用代码写出来。。。</p>
<h2 id="2-浏览器（显示代码）"><a href="#2-浏览器（显示代码）" class="headerlink" title="2. 浏览器（显示代码）"></a>2. 浏览器（显示代码）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/b.png" class title="图示">

<p>可能你最熟悉的是 IE浏览器，但是。。。</p>
<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/liulan.jpg" class title="图示">

<h3 id="2-1-查看浏览器占有的市场份额"><a href="#2-1-查看浏览器占有的市场份额" class="headerlink" title="2.1 查看浏览器占有的市场份额"></a>2.1 查看浏览器占有的市场份额</h3><p>查看网站： <a href="http://tongji.baidu.com/data/browser" target="_blank">http://tongji.baidu.com/data/browser</a></p>
<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/count.png" class title="图示">

<p> 2008年，大名鼎鼎的互联网巨头Google公司发布了它的首款浏览器Chrome浏览器。   </p>
<p> 生下来人家就是富二代官二代啊，后台太强，而且确实先天能力得天独厚。 </p>
<p><strong>一句话说出他们:</strong></p>
<blockquote>
<p>出自谷歌，唯我不败；一统江湖，千秋万代。 </p>
</blockquote>
<h3 id="2-2-常见浏览器内核（了解）"><a href="#2-2-常见浏览器内核（了解）" class="headerlink" title="2.2 常见浏览器内核（了解）"></a>2.2 常见浏览器内核（了解）</h3><p>首先解释一下浏览器内核是什么东西。英文叫做：Rendering Engine，中文翻译很多，排版引擎、解释引擎、渲染引擎，现在流行称为浏览器内核.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">负责读取网页内容，整理讯息，计算网页的显示方式并显示页面.</span><br></pre></td></tr></table></figure>
<p>因为浏览器太多啦， 但是现在主要流行的就是下面几个：</p>
<table>
<thead>
<tr>
<th align="left">浏览器</th>
<th align="center">内核</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IE</td>
<td align="center">Trident</td>
<td align="left">IE、猎豹安全、360极速浏览器、百度浏览器</td>
</tr>
<tr>
<td align="left">firefox</td>
<td align="center">Gecko</td>
<td align="left">可惜这几年已经没落了，打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</td>
</tr>
<tr>
<td align="left">Safari</td>
<td align="center">webkit</td>
<td align="left">现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了）。苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</td>
</tr>
<tr>
<td align="left">chrome</td>
<td align="center">Chromium/Blink</td>
<td align="left">在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用Blink内核。二次开发</td>
</tr>
<tr>
<td align="left">Opera</td>
<td align="center">blink</td>
<td align="left">现在跟随chrome用blink内核。</td>
</tr>
</tbody></table>
<p><strong>拓展阅读：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">移动端的浏览器内核主要说的是系统内置浏览器的内核。</span><br><span class="line"></span><br><span class="line">Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。</span><br><span class="line"></span><br><span class="line">iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的</span><br></pre></td></tr></table></figure>

<h2 id="3-Web标准（重点）"><a href="#3-Web标准（重点）" class="headerlink" title="3. Web标准（重点）"></a>3. Web标准（重点）</h2><p>目标</p>
<ul>
<li>记忆<ul>
<li>能说出网页 中 web 标准三层组成</li>
</ul>
</li>
<li>理解<ul>
<li>能结合人来表述web标准三层</li>
</ul>
</li>
</ul>
<p>Web标准不是某一个标准，而是由W3C组织和其他标准化组织制定的一系列标准的集合。</p>
<p>W3C 万维网联盟是国际最著名的标准化组织。1994年成立后，至今已发布近百项相关万维网的标准，对万维网发展做出了杰出的贡献。</p>
<p><strong>w3c就类似于现实世界中的联合国。</strong></p>
<h3 id="3-1-为什么要遵循WEB标准呢？"><a href="#3-1-为什么要遵循WEB标准呢？" class="headerlink" title="3.1 为什么要遵循WEB标准呢？"></a>3.1 为什么要遵循WEB标准呢？</h3><p> 通过以上浏览器不同内核不同，我们知道他们显示页面或者排版就有些许差异。</p>
<img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/bz.png" class title="图示">

<h3 id="3-2-Web-标准的好处"><a href="#3-2-Web-标准的好处" class="headerlink" title="3.2 Web 标准的好处"></a>3.2 Web 标准的好处</h3><p>遵循web标准可以让不同我们写的页面更标准更统一外，还有许多优点</p>
<p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p>
<h3 id="3-3-Web-标准构成"><a href="#3-3-Web-标准构成" class="headerlink" title="3.3 Web 标准构成"></a>3.3 Web 标准构成</h3><p><strong>构成：</strong> 主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p>
<table>
<thead>
<tr>
<th align="left">标准</th>
<th align="left">说明</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">结构</td>
<td align="left">结构用于对<strong>网页元素</strong>进行整理和分类，咱们主要学的是HTML。</td>
<td align="left"><img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/htmll.jpg" class title="图示"></td>
</tr>
<tr>
<td align="left">表现</td>
<td align="left">表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要指的是CSS</td>
<td align="left"><img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/css.jpg" class title="图示"></td>
</tr>
<tr>
<td align="left">行为</td>
<td align="left">行为是指网页模型的定义及<strong>交互</strong>的编写，咱们主要学的是 Javascript</td>
<td align="left"><img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/search.gif"></td>
</tr>
</tbody></table>
<p> 理想状态我们的源码： .HTML      .css      .js </p>
<p><strong>结合人来记忆web标准：</strong></p>
<ul>
<li>结构标准：   <img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/hb1.png" width="300"> 是你天然的身体 </li>
</ul>
<ul>
<li>表现标准：   <img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/hb2.png" width="300">  决定你是否打扮的美丽外观(衣服？化妆？)</li>
</ul>
<ul>
<li>行为标准：   <img src="/2020/12/26/01-%E5%89%8D%E8%A8%80&WEB%E6%A0%87%E5%87%86/hb3.jpg" width="420">  决定你是否有吸引人的行为(动作)</li>
</ul>
<hr>
<h3 id="web标准小结"><a href="#web标准小结" class="headerlink" title="web标准小结"></a>web标准小结</h3><ul>
<li>web标准有三层结构，分别是结构（html）、表现（css）和行为（javascript）  </li>
<li>结构类似人的身体， 表现类似人的着装， 行为类似人的行为动作</li>
<li>理想状态下，他们三层都是独立的， 放到不同的文件里面</li>
</ul>
<h2 id="4-拓展"><a href="#4-拓展" class="headerlink" title="4. 拓展@"></a>4. 拓展@</h2><ul>
<li><p><strong>介绍一下你对浏览器内核的理解？常见的浏览器内核有哪些？</strong></p>
<p>浏览器内核包括两部分，渲染引擎和js引擎。渲染引擎负责读取网页内容，整理讯息，计算网页的显示方式并显示页面，js引擎是解析执行js获取网页的动态效果。 后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。<br>IE：Trident<br>firefox：Gecko<br>chrom、safari：webkit<br>Opera：Presto<br>Microsoft Edge：EdgeHTML</p>
<p>深度阅读：<a href="http://blog.csdn.net/summer_15/article/details/71249203" target="_blank" rel="noopener">五大主流浏览器内核的源起以及国内各大浏览器内核总结</a> </p>
</li>
</ul>
]]></content>
      <categories>
        <category>WEB标准</category>
      </categories>
      <tags>
        <tag>web标准</tag>
      </tags>
  </entry>
  <entry>
    <title>02-认识HTML</title>
    <url>/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.认识HTML</p>
</blockquote>
<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul>
<li><p>理解</p>
<ul>
<li>HTML的概念</li>
<li>HTML标签的分类</li>
<li>HTML标签的关系</li>
<li>HTML标签的语义化</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>HTML骨架格式</li>
<li>sublime基本使用<a id="more"></a>
<h1 id="1-HTML-初识"><a href="#1-HTML-初识" class="headerlink" title="1. HTML 初识"></a>1. HTML 初识</h1></li>
</ul>
</li>
<li><p>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)是用来描述网页的一种语言。</p>
</li>
<li><p>HTML 不是一种编程语言，而是一种标记语言 (markup language)</p>
</li>
<li><p>标记语言是一套标记标签 (markup tag)</p>
</li>
</ul>
<p><strong>pink老师 一句话说出html作用:</strong></p>
<blockquote>
<p>网页是由网页元素组成的 ， 这些元素是利用html标签描述出来，然后通过浏览器解析，就可以显示给用户了。</p>
</blockquote>
<p><strong>所谓超文本，有2层含义：</strong> </p>
<ol>
<li>因为它可以加入图片、声音、动画、多媒体等内容（*<em>超越文本限制 *</em>）</li>
<li>不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接（*<em>超级链接文本 *</em>）。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"timg.jpg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>门外汉眼中的效果页面</strong></p>
<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/title1.png">

<p><strong>我们要做的html页面</strong></p>
<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/title.png">

<p><strong>html 总结:</strong></p>
<ul>
<li>html 是超文本标记(标签)语言</li>
<li>我们学习html 主要学习html标签</li>
<li>我们用html标签描述网页元素。 比如 图片标签 、文字标签、链接标签等等</li>
<li>标签有自己的语法规范，所有的html标签都是用 &lt;&gt; 表示的</li>
<li>H（很）T（甜）M（蜜）L（啦） 是很快乐的一件事情</li>
</ul>
<h2 id="1-1-HTML骨架标签"><a href="#1-1-HTML骨架标签" class="headerlink" title="1.1 HTML骨架标签"></a>1.1 HTML骨架标签</h2><p>日常生活的书信，我们要遵循共同的约定。 </p>
<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/mess.png" alt>

<p>同理：HTML 有自己的语言语法骨架格式：（要遵循，要专业） 要求务必非常流畅的默写下来。。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="html骨架标签总结"><a href="#html骨架标签总结" class="headerlink" title="html骨架标签总结"></a>html骨架标签总结</h4><table>
<thead>
<tr>
<th>标签名</th>
<th align="center">定义</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td><html></html></td>
<td align="center">HTML标签</td>
<td align="left">页面中最大的标签，我们成为  根标签</td>
</tr>
<tr>
<td><head></head></td>
<td align="center">文档的头部</td>
<td align="left">注意在head标签中我们必须要设置的标签是title</td>
</tr>
<tr>
<td><titile></titile></td>
<td align="center">文档的标题</td>
<td align="left">让页面拥有一个属于自己的网页标题</td>
</tr>
<tr>
<td><body></body></td>
<td align="center">文档的主体</td>
<td align="left">元素包含文档的所有内容，页面内容 基本都是放到body里面的</td>
</tr>
</tbody></table>
<p>*<em>课堂练习1： *</em>   </p>
<p>书写我们的第一个HTML 页面。</p>
<ol>
<li><p>新建一个 01-html骨架标签  的 TXT 文件。</p>
</li>
<li><p>里面写入刚才的HTML 骨架。  </p>
</li>
<li><p>把后缀名改为 .HTML。</p>
</li>
<li><p>右击–谷歌浏览器打开。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           你我之间 黑马洗练 月薪过万   一飞冲天   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
 <img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/01html骨架.jpg">

<p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p>
<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/pig.png" width="500">



<h4 id="团队约定大小写"><a href="#团队约定大小写" class="headerlink" title="团队约定大小写"></a>团队约定大小写</h4><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;     </span><br><span class="line">        &lt;title&gt;我的第一个页面&lt;&#x2F;title&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;HEAD&gt;     </span><br><span class="line">        &lt;TITLE&gt;我的第一个页面&lt;&#x2F;TITLE&gt;</span><br><span class="line">&lt;&#x2F;HEAD&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-HTML元素标签分类"><a href="#1-2-HTML元素标签分类" class="headerlink" title="1.2 HTML元素标签分类"></a>1.2 HTML元素标签分类</h2><p><strong>标签：</strong></p>
<p>在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;html&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。</p>
<p><strong>分类：</strong></p>
<ol>
<li>常规元素（双标签）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span>   比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>  我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。</li>
<li>和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</li>
<li>我们以后接触的基本都是双标签</li>
</ul>
<ol start="2">
<li>空元素（单标签）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span>  比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>空元素 用单标签来表示， 简单点说，就是里面不需要包含内容， 只有一个开始标签不需要关闭。</li>
<li>这种单身狗标签非常少，一共没多少，我们多记忆就好</li>
</ul>
<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
<p>世界上单身狗毕竟是少数的， 大部分还是喜欢成双成对，不要拉下你的另外一半，对待一个双标签要有始有终。</p>
</blockquote>
<h2 id="1-3-HTML标签关系"><a href="#1-3-HTML标签关系" class="headerlink" title="1.3 HTML标签关系"></a>1.3 HTML标签关系</h2><p>主要针对于<strong>双标签</strong> 的相互关系分为两种：  请大家务必熟悉记住这种标签关系，因为后面我们标签嵌套特别多，很容易弄混他们的关系。</p>
<ol>
<li>嵌套关系</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/father.jpg">

<p>2.并列关系</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/xiong.jpg" width="500">

<p><strong>倡议：</strong> </p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位（一个tab是4个空格）。如果是并列关系，最好上下对齐。</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
<p>html双标签 可以分为  有 一种是 父子级 包含关系的标签      一种是 兄弟级 并列关系的标签</p>
</blockquote>
<h2 id="1-4-课堂一练"><a href="#1-4-课堂一练" class="headerlink" title="1.4 课堂一练"></a>1.4 课堂一练</h2><p>*<em>请问下列哪组标签关系是错误的？ *</em></p>
<ul>
<li><input disabled type="checkbox"> <head> </head><body> </body>


</li>
</ul>
<ul>
<li><input disabled type="checkbox"> <div> <strong></strong> </div>


</li>
</ul>
<ul>
<li><input checked disabled type="checkbox"> <head> <title></title></head> 


</li>
</ul>
<ul>
<li><input disabled type="checkbox"> <body> <div></div> <script src="https://cdn.jsdelivr.net/npm/live2d-widget@^3.1.3/lib/L2Dwidget.min.js"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"scale":1,"hHeadPos":0.5,"vHeadPos":0.618,"jsonPath":"/live2dw/assets/tororo.model.json"},"display":{"superSample":2,"width":150,"height":180,"position":"right","hOffset":80,"vOffset":0},"mobile":{"show":true},"react":{"opacityDefault":1,"opacityOnHover":0.2},"log":false});</script></body>



</li>
</ul>
<h1 id="2-代码开发工具（书写代码）"><a href="#2-代码开发工具（书写代码）" class="headerlink" title="2. 代码开发工具（书写代码）"></a>2. 代码开发工具（书写代码）</h1><ul>
<li><p>为了提高我们的开发效率</p>
</li>
<li><p>减少代码的出错我们不提倡用记事本开发，我们有更好的犀利哥。</p>
<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/s.png">
</li>
<li><p>Dreamweaver</p>
</li>
<li><p>SublimeText</p>
</li>
<li><p>WebStorm</p>
</li>
<li><p>HBuilder</p>
</li>
<li><p>VScode</p>
</li>
</ul>
<p>有人说：</p>
<p>  普通青年    Dreamweaver</p>
<p>  文艺青年    sublime</p>
<p>  高手和傻子  用记事本</p>
<p>  其实。。。。</p>
  <img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/node.png">


<p>感觉： 这个feel 倍儿爽 feel feel倍儿爽 爽爽爽爽！</p>
 <img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/shuang.gif">


<p>sublime有非常多的优点， 最开心的就是非常轻量级，打开速度超快，后面更高的功能，后面再接触。</p>
<p><strong>sublime生成html骨架小技巧</strong></p>
<ul>
<li>双击打开软件</li>
<li>新建文件（ctrl+n）</li>
<li>保存（ctrl+s）,保存为：文件名.html （ 注意 后缀名必须是 .html ) </li>
<li>放大缩小代码  按住 ctrl  在 滚动鼠标滚轮  或者   ctrl+ 加号 键     和 ctrl +   减号键     </li>
<li>生成页面骨架结构<ul>
<li>html: 5    按下tab键    或者  </li>
<li>!    按下tab键</li>
</ul>
</li>
<li>在浏览器中预览页面<ul>
<li>右键在  浏览器中打开</li>
</ul>
</li>
</ul>
<h1 id="3-文档类型-lt-DOCTYPE-gt"><a href="#3-文档类型-lt-DOCTYPE-gt" class="headerlink" title="3. 文档类型&lt;!DOCTYPE&gt;"></a>3. 文档类型&lt;!DOCTYPE&gt;</h1><p><strong>用法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>作用：</strong></p>
<!DOCTYPE><p> 声明位于文档中的最前面的位置，处于 <html> 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</html></p>
<p><strong>pink老师 一句话说出他们:</strong></p>
   <!DOCTYPE html><p>  就是告诉浏览器按照HTML5 规范解析页面.</p>
<p><strong>团队约定：</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="4-页面语言lang"><a href="#4-页面语言lang" class="headerlink" title="4. 页面语言lang"></a>4. 页面语言lang</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  指定html 语言种类</span><br></pre></td></tr></table></figure>

<p>最常见的2个：</p>
<ol>
<li><code>en</code>定义语言为英语</li>
<li><code>zh-CN</code>定义语言为中文</li>
</ol>
<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
 <html lang="zh-CN">  指定该html标签 内容 所用的语言为中文
</html></blockquote>
<p><strong>团队约定：</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">考虑浏览器和操作系统的兼容性，目前仍然使用 zh-CN 属性值</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>@拓展阅读：</strong></p>
<p>简单来说，可能对于程序来说没有太大的作用，但是它可以告诉浏览器，搜索引擎，一些处理Html的程序对页面语言内容来做一些对应的处理或者事情。<br>比如可以</p>
<ul>
<li>根据根据lang属性来设定不同语言的css样式，或者字体</li>
<li>告诉搜索引擎做精确的识别</li>
<li>让语法检查程序做语言识别</li>
<li>帮助翻译工具做识别</li>
<li>帮助网页阅读程序做识别<br>等等</li>
</ul>
<h1 id="5-字符集"><a href="#5-字符集" class="headerlink" title="5. 字符集"></a>5. 字符集</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符集(Character set)是多个字符的集合。</span><br><span class="line"></span><br><span class="line">计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。</span><br></pre></td></tr></table></figure>

<p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p>
<ul>
<li>gb2312 简单中文  包括6763个汉字  GUO BIAO</li>
<li>BIG5   繁体中文 港澳台等用</li>
<li>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</li>
<li>UTF-8则基本包含全世界所有国家需要用到的字符</li>
<li><strong>这句代码非常关键， 是必须要写的代码，否则可能引起乱码的情况。</strong></li>
</ul>
<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
<p>这句话是让 html 文件是以 UTF-8 编码保存的， 浏览器根据编码去解码对应的html内容。</p>
</blockquote>
<p><strong>团队约定：</strong></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般情况下统一使用 &quot;UTF-8&quot; 编码, 请尽量统一写成标准的 &quot;UTF-8&quot;，不要写成 &quot;utf-8&quot; 或 &quot;utf8&quot; 或 &quot;UTF8&quot;。</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="6-HTML标签的语义化"><a href="#6-HTML标签的语义化" class="headerlink" title="6. HTML标签的语义化"></a>6. HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p>
<p><strong>pink老师 一句话说出语义化目的:</strong></p>
<blockquote>
<p>根据标签的语义，在合适的地方给一个最为合理的标签，让结构更清晰。</p>
</blockquote>
<ol>
<li>方便代码的阅读和维护</li>
<li>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </li>
<li>使用语义化标签会具有更好地搜索引擎优化 </li>
</ol>
<img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/02语义化.jpg">



<p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。(  裸奔起来一样好看 )</p>
<p>遵循的原则：先确定语义的HTML ，再选合适的CSS。所以，<strong>我们接下来学习html标签，要根据语义去记忆。</strong> HTML网页中任何元素的实现都要依靠HTML标签。</p>
<h1 id="7-拓展阅读"><a href="#7-拓展阅读" class="headerlink" title="7. 拓展阅读@"></a>7. 拓展阅读@</h1><h2 id="单身狗的由来"><a href="#单身狗的由来" class="headerlink" title="单身狗的由来"></a>单身狗的由来</h2><p>单身狗一词最早是出自网络社区，起源与大话西游有关。</p>
<p>大话西游之大圣娶亲最后一幕“他好像一条狗”由来。</p>
 <img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/dog.jpg">
 <img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/dog2.jpg">
 <img src="/2020/12/26/02-%E8%AE%A4%E8%AF%86HTML/dog3.jpg">]]></content>
  </entry>
  <entry>
    <title>02-CSS基础选择器</title>
    <url>/2020/12/26/02-CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.CSS基础选择器</p>
</blockquote>
<h1 id="CSS选择器（重点）"><a href="#CSS选择器（重点）" class="headerlink" title="CSS选择器（重点）"></a>CSS选择器（重点）</h1><p> 学习目标：</p>
<ul>
<li>理解<ul>
<li>能说出选择器的作用</li>
<li>id选择器和类选择器的区别</li>
</ul>
</li>
<li>应用<ul>
<li>能够使用基础选择器给页面元素添加样式<a id="more"></a>
<h2 id="1-CSS选择器作用（重点）"><a href="#1-CSS选择器作用（重点）" class="headerlink" title="1. CSS选择器作用（重点）"></a>1. CSS选择器作用（重点）</h2></li>
</ul>
</li>
</ul>
<img src="/2020/12/26/02-CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8/ax.png">

<p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p>
<p>很多， 比如 一只眼睛的一组，剩下的一组  </p>
<h3 id="选择器的作用"><a href="#选择器的作用" class="headerlink" title="选择器的作用"></a>选择器的作用</h3><p>​    找到特定的HTML页面元素</p>
<p><strong>pink老师一句话说出他们： ※※※※</strong></p>
<blockquote>
<p>*<em>CSS选择器干啥的？   选择标签用的， 把我们想要的标签选择出来 *</em>  必须记住的</p>
</blockquote>
<p>css 就是 分两件事， 选对人，  做对事。 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; </span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码就是2件事， 把  h3选出来， 然后 把它变成了 红色。 以后我们都这么干。</p>
<p>选择器分为基础选择器和 复合选择器，我们这里先讲解一下 基础选择器。</p>
<h2 id="2-CSS基础选择器"><a href="#2-CSS基础选择器" class="headerlink" title="2. CSS基础选择器"></a>2. CSS基础选择器</h2><h3 id="2-1-标签选择器"><a href="#2-1-标签选择器" class="headerlink" title="2.1 标签选择器"></a>2.1 标签选择器</h3><ul>
<li><p>概念：</p>
<p>标签选择器（元素选择器）是指用<strong>HTML标签名</strong>称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p>
</li>
<li><p>语法：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签名&#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>作用：</p>
<p>标签选择器 可以把某一类标签<strong>全部</strong>选择出来  比如所有的div标签  和 所有的 span标签</p>
</li>
<li><p>优点：</p>
<p>是能快速为页面中同类型的标签统一样式</p>
</li>
<li><p>缺点：</p>
<p>不能设计差异化样式。</p>
</li>
</ul>
<p><strong>总结 口诀：</strong></p>
<p>   标签选择器，<br>   页面同选起。<br>   直接写标签，<br>   全部不放弃。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">思考： 如果想要差异化选择不同的标签，怎么办呢？ 就是说 我想单独选一个或者某几个标签呢？</span><br></pre></td></tr></table></figure>

<h3 id="2-2-类选择器"><a href="#2-2-类选择器" class="headerlink" title="2.2 类选择器"></a>2.2 类选择器</h3><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名.</p>
<ul>
<li><p>语法：</p>
<ul>
<li>类名选择器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.类名  &#123;   </span><br><span class="line">    属性1:属性值1; </span><br><span class="line">    属性2:属性值2; </span><br><span class="line">    属性3:属性值3;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&#39;类名&#39;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>优点：</p>
<ul>
<li>可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签 </li>
</ul>
</li>
<li><p>注意</p>
<ul>
<li>类选择器使用“.”（英文点号）进行标识，后面紧跟类名(自定义，我们自己命名的)</li>
<li>长名称或词组可以使用中横线来为选择器命名。</li>
<li>不要纯数字、中文等命名， 尽量使用英文字母来表示。</li>
</ul>
</li>
</ul>
<p>命名规范：  见附件（Web前端开发规范手册.doc）</p>
<p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p>
<ul>
<li><p><strong>记忆口诀</strong></p>
<p>差异化选择<br>一个或多个<br>上面点定义<br>类名别写错<br>谁用谁调用<br>class来做。</p>
<p>嘿嘿，工作类最多。</p>
</li>
</ul>
<p><strong>课堂案例：</strong></p>
 <img src="/2020/12/26/02-CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8/go.png">



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="css">        <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line">        	color: blue;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">        	color: red;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.orange</span> &#123;</span></span><br><span class="line">			color: orange;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.green</span> &#123;</span></span><br><span class="line">			color: green;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>G<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"orange"</span>&gt;</span>o<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>g<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>l<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>e<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-类选择器特殊用法-多类名"><a href="#2-3-类选择器特殊用法-多类名" class="headerlink" title="2.3 类选择器特殊用法- 多类名"></a>2.3 类选择器特殊用法- 多类名</h3><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p>
<img src="/2020/12/26/02-CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8/lei.png">

<p>注意：</p>
<ul>
<li>各个类名中间用空格隔开。</li>
<li>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pink fontWeight font20"</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font20"</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font14 pink"</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font14"</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-id选择器"><a href="#2-4-id选择器" class="headerlink" title="2.4 id选择器"></a>2.4 id选择器</h3><p>id选择器使用<code>#</code>进行标识，后面紧跟id名</p>
<ul>
<li><p>其基本语法格式如下：</p>
<ul>
<li><p>id选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#id名 &#123;属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id&#x3D;&quot;id名&quot;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p>
</li>
<li><p>用法基本和类选择器相同。</p>
</li>
</ul>
<h4 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h4> <img src="/2020/12/26/02-CSS%E5%9F%BA%E7%A1%80%E9%80%89%E6%8B%A9%E5%99%A8/zfb.jpg">

<ul>
<li>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。<ul>
<li>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</li>
<li>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</li>
</ul>
</li>
</ul>
<p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p>
<p><strong>pink老师 总结他们</strong></p>
<ul>
<li>类选择器我们在修改样式中，用的最多。</li>
<li>id选择器一般用于页面唯一性的元素身上，经常和我们后面学习的javascript 搭配使用。</li>
</ul>
<h3 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h3><ul>
<li><p>概念</p>
<p>通配符选择器用<code>*</code>号表示，  *   就是 选择所有的标签      他是所有选择器中作用范围最广的，能匹配页面中所有的元素。</p>
</li>
<li><p>其基本语法格式如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* &#123; 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; &#125;</span><br></pre></td></tr></table></figure>

<p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;                    <span class="comment">/* 定义外边距*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;                   <span class="comment">/* 定义内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<pre><code>会匹配页面所有的元素，降低页面响应速度，不建议随便使用</code></pre></li>
</ul>
<h3 id="2-7-基础选择器总结"><a href="#2-7-基础选择器总结" class="headerlink" title="2.7 基础选择器总结"></a>2.7 基础选择器总结</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>作用</th>
<th>缺点</th>
<th>使用情况</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>标签选择器</td>
<td>可以选出所有相同的标签，比如p</td>
<td>不能差异化选择</td>
<td>较多</td>
<td>p { color：red;}</td>
</tr>
<tr>
<td>类选择器</td>
<td>可以选出1个或者多个标签</td>
<td>可以根据需求选择</td>
<td>非常多</td>
<td>.nav { color: red; }</td>
</tr>
<tr>
<td>id选择器</td>
<td>一次只能选择器1个标签</td>
<td>只能使用一次</td>
<td>不推荐使用</td>
<td>#nav {color: red;}</td>
</tr>
<tr>
<td>通配符选择器</td>
<td>选择所有的标签</td>
<td>选择的太多，有部分不需要</td>
<td>不推荐使用</td>
<td>* {color: red;}</td>
</tr>
</tbody></table>
<p>基础选择器我们一共学了4个，  每个都有自己的价值， 可能再某个地方都能用到。但是如果说，一定要找个最常用的，那么，肯定是类选择器。</p>
<h3 id="2-8-团队约定"><a href="#2-8-团队约定" class="headerlink" title="2.8 团队约定"></a>2.8 团队约定</h3><p>选择器</p>
<ul>
<li>尽量少用通用选择器 <code>*</code></li>
<li>尽量少用 ID 选择器</li>
<li>不使用无具体语义定义的标签选择器 div span </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 推荐 *&#x2F;</span><br><span class="line">.jdc &#123;&#125;</span><br><span class="line">li &#123;&#125;</span><br><span class="line">p&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* 不推荐 *&#x2F;</span><br><span class="line">*&#123;&#125;</span><br><span class="line">#jdc &#123;&#125;</span><br><span class="line">div&#123;&#125;   因为div 没有语义，我们尽量少用</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>03-CSS文字文本样式</title>
    <url>/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="CSS字体样式属性调试工具"><a href="#CSS字体样式属性调试工具" class="headerlink" title="CSS字体样式属性调试工具"></a>CSS字体样式属性调试工具</h1><p> 目标</p>
<ul>
<li>应用<ul>
<li>使用css字体样式完成对字体的设置</li>
<li>使用css外观属性给页面元素添加样式</li>
<li>使用常用的emment语法</li>
<li>能够使用开发人员工具代码调试<a id="more"></a>
<h1 id="1-font字体"><a href="#1-font字体" class="headerlink" title="1.font字体"></a>1.font字体</h1></li>
</ul>
</li>
</ul>
<h2 id="1-1-font-size-大小"><a href="#1-1-font-size-大小" class="headerlink" title="1.1 font-size:大小"></a>1.1 font-size:大小</h2><ul>
<li><p>作用：</p>
<p>font-size属性用于设置字号</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;  </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>单位：</p>
<ul>
<li>可以使用相对长度单位，也可以使用绝对长度单位。</li>
<li>相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。</li>
</ul>
</li>
</ul>
<img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/dd.png">

<p><strong>注意：</strong></p>
<ul>
<li>我们文字大小以后，基本就用px了，其他单位很少使用</li>
<li>谷歌浏览器默认的文字大小为16px</li>
<li>但是不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小。一般给body指定整个页面文字的大小</li>
</ul>
<h2 id="1-2-font-family-字体"><a href="#1-2-font-family-字体" class="headerlink" title="1.2 font-family:字体"></a>1.2 font-family:字体</h2><ul>
<li><p>作用：</p>
<p>font-family属性用于设置哪一种字体。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p&#123; font-family:&quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑</li>
<li>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体， 如果都没有，则以我们电脑默认的字体为准。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p&#123;font-family: Arial,&quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/good.png">常用技巧：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 各种字体之间必须使用英文状态下的逗号隔开。</span><br><span class="line">2. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</span><br><span class="line">3. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: &quot;Times New Roman&quot;;。</span><br><span class="line">4. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</span><br></pre></td></tr></table></figure>

<h3 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h3><img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/shs.png">

<ul>
<li><p>为什么使用 Unicode字体</p>
<ul>
<li>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。</li>
<li>xp 系统不支持 类似微软雅黑的中文。</li>
</ul>
</li>
<li><p>解决：</p>
<ul>
<li><p>方案一： 你可以使用英文来替代。 比如<code>font-family:&quot;Microsoft Yahei&quot;</code>。</p>
</li>
<li><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: &quot;\5FAE\8F6F\96C5\9ED1&quot;;   表示设置字体为“微软雅黑”。</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>字体名称</th>
<th>英文名称</th>
<th>Unicode 编码</th>
</tr>
</thead>
<tbody><tr>
<td>宋体</td>
<td>SimSun</td>
<td>\5B8B\4F53</td>
</tr>
<tr>
<td>新宋体</td>
<td>NSimSun</td>
<td>\65B0\5B8B\4F53</td>
</tr>
<tr>
<td>黑体</td>
<td>SimHei</td>
<td>\9ED1\4F53</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Microsoft YaHei</td>
<td>\5FAE\8F6F\96C5\9ED1</td>
</tr>
<tr>
<td>楷体_GB2312</td>
<td>KaiTi_GB2312</td>
<td>\6977\4F53_GB2312</td>
</tr>
<tr>
<td>隶书</td>
<td>LiSu</td>
<td>\96B6\4E66</td>
</tr>
<tr>
<td>幼园</td>
<td>YouYuan</td>
<td>\5E7C\5706</td>
</tr>
<tr>
<td>华文细黑</td>
<td>STXihei</td>
<td>\534E\6587\7EC6\9ED1</td>
</tr>
<tr>
<td>细明体</td>
<td>MingLiU</td>
<td>\7EC6\660E\4F53</td>
</tr>
<tr>
<td>新细明体</td>
<td>PMingLiU</td>
<td>\65B0\7EC6\660E\4F53</td>
</tr>
</tbody></table>
<p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p>
<h2 id="1-3-font-weight-字体粗细"><a href="#1-3-font-weight-字体粗细" class="headerlink" title="1.3 font-weight:字体粗细"></a>1.3 font-weight:字体粗细</h2><ul>
<li>在html中如何将字体加粗我们可以用标签来实现<ul>
<li>使用 b  和 strong 标签是文本加粗。</li>
</ul>
</li>
<li>可以使用CSS 来实现，但是CSS 是没有语义的。</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td align="left">默认值（不加粗的）</td>
</tr>
<tr>
<td>bold</td>
<td align="left">定义粗体（加粗的）</td>
</tr>
<tr>
<td>100~900</td>
<td align="left">400 等同于 normal，而 700 等同于 bold  我们重点记住这句话</td>
</tr>
</tbody></table>
<p>提倡：</p>
<p>  我们平时更喜欢用数字来表示加粗和不加粗。</p>
<h2 id="1-4-font-style-字体风格"><a href="#1-4-font-style-字体风格" class="headerlink" title="1.4 font-style:字体风格"></a>1.4 font-style:字体风格</h2><ul>
<li>在html中如何将字体倾斜我们可以用标签来实现<ul>
<li>字体倾斜除了用 i  和 em 标签，</li>
</ul>
</li>
<li>可以使用CSS 来实现，但是CSS 是没有语义的</li>
</ul>
<p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td align="left">默认值，浏览器会显示标准的字体样式  font-style: normal;</td>
</tr>
<tr>
<td>italic</td>
<td align="left">浏览器会显示斜体的字体样式。</td>
</tr>
</tbody></table>
<p><img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/good.png">小技巧： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</span><br></pre></td></tr></table></figure>

<h2 id="1-5-font-综合设置字体样式-重点"><a href="#1-5-font-综合设置字体样式-重点" class="headerlink" title="1.5 font:综合设置字体样式 (重点)"></a>1.5 font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置</p>
<ul>
<li>基本语法格式如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">font</span>: font-style  font-weight  font-size/line-height  font-family;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以<strong>空格</strong>隔开。</li>
<li>其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</li>
</ul>
</li>
</ul>
<h2 id="1-6-font总结"><a href="#1-6-font总结" class="headerlink" title="1.6 font总结"></a>1.6 font总结</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">表示</th>
<th align="left">注意点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">font-size</td>
<td align="left">字号</td>
<td align="left">我们通常用的单位是px 像素，一定要跟上单位</td>
</tr>
<tr>
<td align="left">font-family</td>
<td align="left">字体</td>
<td align="left">实际工作中按照团队约定来写字体</td>
</tr>
<tr>
<td align="left">font-weight</td>
<td align="left">字体粗细</td>
<td align="left">记住加粗是 700 或者 bold  不加粗 是 normal 或者  400  记住数字不要跟单位</td>
</tr>
<tr>
<td align="left">font-style</td>
<td align="left">字体样式</td>
<td align="left">记住倾斜是 italic     不倾斜 是 normal  工作中我们最常用 normal</td>
</tr>
<tr>
<td align="left">font</td>
<td align="left">字体连写</td>
<td align="left">1. 字体连写是有顺序的  不能随意换位置 2. 其中字号 和 字体 必须同时出现</td>
</tr>
</tbody></table>
<h1 id="2-CSS外观属性"><a href="#2-CSS外观属性" class="headerlink" title="2. CSS外观属性"></a>2. CSS外观属性</h1><h2 id="2-1-color-文本颜色"><a href="#2-1-color-文本颜色" class="headerlink" title="2.1 color:文本颜色"></a>2.1 color:文本颜色</h2><ul>
<li><p>作用：</p>
<p>color属性用于定义文本的颜色，</p>
</li>
<li><p>其取值方式有如下3种：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">表示表示</th>
<th align="left">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">预定义的颜色值</td>
<td align="left">red，green，blue，还有我们的御用色 pink</td>
</tr>
<tr>
<td align="left">十六进制</td>
<td align="left">#FF0000，#FF6600，#29D794</td>
</tr>
<tr>
<td align="left">RGB代码</td>
<td align="left">rgb(255,0,0)或rgb(100%,0%,0%)</td>
</tr>
</tbody></table>
<ul>
<li><p>注意</p>
<p>我们实际工作中， 用 16进制的写法是最多的，而且我们更喜欢简写方式比如  #f00 代表红色</p>
</li>
</ul>
<h2 id="2-2-text-align-文本水平对齐方式"><a href="#2-2-text-align-文本水平对齐方式" class="headerlink" title="2.2 text-align:文本水平对齐方式"></a>2.2 text-align:文本水平对齐方式</h2><ul>
<li><p>作用：</p>
<p>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性</p>
</li>
<li><p>其可用属性值如下：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td align="center">左对齐（默认值）</td>
</tr>
<tr>
<td>right</td>
<td align="center">右对齐</td>
</tr>
<tr>
<td>center</td>
<td align="center">居中对齐</td>
</tr>
</tbody></table>
<ul>
<li><p>注意：</p>
<p>是让盒子里面的内容水平居中， 而不是让盒子居中对齐</p>
</li>
</ul>
<h2 id="2-3-line-height-行间距"><a href="#2-3-line-height-行间距" class="headerlink" title="2.3 line-height:行间距"></a>2.3 line-height:行间距</h2><ul>
<li><p>作用：</p>
<p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p>
</li>
<li><p>单位：</p>
<ul>
<li>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</li>
</ul>
</li>
<li><p>技巧：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般情况下，行距比字号大7.8像素左右就可以了。</span><br><span class="line">line-height: 24px;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-text-indent-首行缩进"><a href="#2-4-text-indent-首行缩进" class="headerlink" title="2.4 text-indent:首行缩进"></a>2.4 text-indent:首行缩进</h2><ul>
<li><p>作用：</p>
<p>text-indent属性用于设置首行文本的缩进，</p>
</li>
<li><p>属性值</p>
<ul>
<li>其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值,</li>
<li>建议使用em作为设置单位。</li>
</ul>
</li>
</ul>
<p><strong>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">      <span class="comment">/*行间距*/</span></span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">      <span class="comment">/*首行缩进2个字  em  1个em 就是1个字的大小*/</span></span><br><span class="line">      <span class="attribute">text-indent</span>: <span class="number">2em</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-text-decoration-文本的装饰"><a href="#2-5-text-decoration-文本的装饰" class="headerlink" title="2.5 text-decoration 文本的装饰"></a>2.5 text-decoration 文本的装饰</h2><p>text-decoration   通常我们用于给链接修改装饰效果</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认。定义标准的文本。 取消下划线（最常用）</td>
</tr>
<tr>
<td>underline</td>
<td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td>
</tr>
<tr>
<td>overline</td>
<td>定义文本上的一条线。（不用）</td>
</tr>
<tr>
<td>line-through</td>
<td>定义穿过文本下的一条线。（不常用）</td>
</tr>
</tbody></table>
<h2 id="2-6-CSS外观属性总结"><a href="#2-6-CSS外观属性总结" class="headerlink" title="2.6 CSS外观属性总结"></a>2.6 CSS外观属性总结</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">表示</th>
<th align="left">注意点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">color</td>
<td align="left">颜色</td>
<td align="left">我们通常用  十六进制   比如 而且是简写形式 #fff</td>
</tr>
<tr>
<td align="left">line-height</td>
<td align="left">行高</td>
<td align="left">控制行与行之间的距离</td>
</tr>
<tr>
<td align="left">text-align</td>
<td align="left">水平对齐</td>
<td align="left">可以设定文字水平的对齐方式</td>
</tr>
<tr>
<td align="left">text-indent</td>
<td align="left">首行缩进</td>
<td align="left">通常我们用于段落首行缩进2个字的距离   text-indent: 2em;</td>
</tr>
<tr>
<td align="left">text-decoration</td>
<td align="left">文本修饰</td>
<td align="left">记住 添加 下划线  underline  取消下划线  none</td>
</tr>
</tbody></table>
<h1 id="3-开发者工具（chrome）"><a href="#3-开发者工具（chrome）" class="headerlink" title="3.开发者工具（chrome）"></a>3.开发者工具（chrome）</h1><p><strong>此工具是我们的必备工具，以后代码出了问题</strong></p>
<p><strong>我们首先第一反应就是：</strong></p>
<ul>
<li>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</li>
<li>菜单：   右击网页空白出—检查</li>
</ul>
<img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/11开发人员工具.jpg">

<ul>
<li>通过开发人员工具小指针工具，查找页面元素</li>
<li>左侧是html页面结构，右侧是css样式</li>
</ul>
<p><img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/good.png">小技巧：</p>
<ol>
<li>ctrl+滚轮 可以 放大开发者工具代码大小。</li>
<li>左边是HTML元素结构   右边是CSS样式。</li>
<li>右边CSS样式可以改动数值和颜色查看更改后效果。</li>
<li>ctrl + 0  复原浏览器大小</li>
</ol>
<h1 id="4-sublime快捷操作emmet语法"><a href="#4-sublime快捷操作emmet语法" class="headerlink" title="4. sublime快捷操作emmet语法"></a>4. sublime快捷操作emmet语法</h1><p>Emmet的前身是Zen coding,它使用缩写,来提高html/css的编写速度。</p>
<ol>
<li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 <div></div></p>
</li>
<li><p>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</p>
</li>
<li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p>
</li>
<li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p>
</li>
<li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p>
</li>
<li><p>如果生成的div 类名是有顺序的， 可以用 自增符号  $     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.demo$*3        </span><br><span class="line">&lt;div class&#x3D;&quot;demo1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;demo2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;demo3&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="5-综合案例"><a href="#5-综合案例" class="headerlink" title="5. 综合案例"></a>5. 综合案例</h1><img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/css1.png">

<h1 id="6-今日总结"><a href="#6-今日总结" class="headerlink" title="6. 今日总结"></a>6. 今日总结</h1><img src="/2020/12/26/03-CSS%E6%96%87%E5%AD%97%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/zong1.jpg">

<h1 id="7-拓展阅读"><a href="#7-拓展阅读" class="headerlink" title="7. 拓展阅读@"></a>7. 拓展阅读@</h1><p><a href="https://www.w3cplus.com/tools/emmet-cheat-sheet.html" target="_blank" rel="noopener">emment语法</a></p>
]]></content>
  </entry>
  <entry>
    <title>03-HTML常用标签</title>
    <url>/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.HTML常用标签</p>
</blockquote>
<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul>
<li><p>理解：</p>
<ul>
<li>相对路径三种形式</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>排版标签</li>
<li>文本格式化标签</li>
<li>图像标签</li>
<li>链接</li>
<li>相对路径，绝对路径的使用<a id="more"></a>
<h1 id="1-HTML常用标签"><a href="#1-HTML常用标签" class="headerlink" title="1. HTML常用标签"></a>1. HTML常用标签</h1></li>
</ul>
<p>首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p>
<p>HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p>
</li>
</ul>
<h2 id="1-1-排版标签"><a href="#1-1-排版标签" class="headerlink" title="1.1 排版标签"></a>1.1 排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p>
<h3 id="1）标题标签h-熟记"><a href="#1）标题标签h-熟记" class="headerlink" title="1）标题标签h (熟记)"></a>1）标题标签h (熟记)</h3><p> 单词缩写：  head   头部. 标题       title  文档标题</p>
<p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p>
<p><strong>标题标签语义：</strong>  作为标题使用，并且依据重要性递减</p>
<p>其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
  <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/h.png">

<p><strong>小结 :</strong></p>
<ul>
<li>加了标题的文字会变的加粗，字号也会依次变大</li>
<li>一行是只能放一个标题的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传智播客学前端，</span><br><span class="line">　　 前端入门亦简单。</span><br><span class="line">　　 简单知识简单看，</span><br><span class="line">　　 重点勤练写三遍。</span><br><span class="line">　　 标题一共六级选，</span><br><span class="line">　　 具体效果刷新见。</span><br><span class="line">　　        ------pink老师</span><br></pre></td></tr></table></figure>

<h3 id="2）段落标签p-熟记"><a href="#2）段落标签p-熟记" class="headerlink" title="2）段落标签p ( 熟记)"></a>2）段落标签p ( 熟记)</h3><p>单词缩写：  paragraph  段落  [ˈpærəgræf]    无须记这个单词</p>
<p><strong>作用语义：</strong></p>
<p>可以把 HTML 文档分割为若干段落</p>
<p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p>
<h3 id="3）水平线标签hr-认识"><a href="#3）水平线标签hr-认识" class="headerlink" title="3）水平线标签hr(认识)"></a>3）水平线标签hr(认识)</h3><p>单词缩写：  horizontal  横线    [ˌhɔrəˈzɑntl]    同上</p>
<p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr>就是创建横跨网页水平线的标签。其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure>

<p> 在网页中显示默认样式的水平线。</p>
<p>课堂练习:新闻页面 </p>
<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/sh.png"> 

<h3 id="4）换行标签br-熟记"><a href="#4）换行标签br-熟记" class="headerlink" title="4）换行标签br (熟记)"></a>4）换行标签br (熟记)</h3><p>单词缩写：  break   打断 ,换行</p>
<p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时如果还像在word中直接敲回车键换行就不起作用了。</p>
<p>此处有练习题</p>
<h3 id="5）div-和-span标签-重点"><a href="#5）div-和-span标签-重点" class="headerlink" title="5）div 和  span标签(重点)"></a>5）div 和  span标签(重点)</h3><p>div   span    是没有语义的     是我们网页布局主要的2个盒子   想必你听过  css+div</p>
<p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p>
<p>span   跨度，跨距；范围    </p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>他们两个都是盒子，用来装我们网页元素的， 只不过他们有区别，现在我们主要记住使用方法和特点就好了</p>
<ul>
<li>div标签  用来布局的，但是现在一行只能放一个div</li>
<li>span标签  用来布局的，一行上可以放好多个span</li>
</ul>
<p>后面后面讲显示模式的时候，会告诉大家</p>
<h3 id="排版标签总结"><a href="#排版标签总结" class="headerlink" title="排版标签总结"></a>排版标签总结</h3><table>
<thead>
<tr>
<th>标签名</th>
<th align="left">定义</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td><hx></hx></td>
<td align="left">标题标签</td>
<td align="left">作为标题使用，并且依据重要性递减</td>
</tr>
<tr>
<td><p></p></td>
<td align="left">段落标签</td>
<td align="left">可以把 HTML 文档分割为若干段落</td>
</tr>
<tr>
<td><hr></td>
<td align="left">水平线标签</td>
<td align="left">没啥可说的，就是一条线</td>
</tr>
<tr>
<td><br></td>
<td align="left">换行标签</td>
<td align="left"></td>
</tr>
<tr>
<td><div></div></td>
<td align="left">div标签</td>
<td align="left">用来布局的，但是现在一行只能放一个div</td>
</tr>
<tr>
<td><span></span></td>
<td align="left">span标签</td>
<td align="left">用来布局的，一行上可以放好多个span</td>
</tr>
</tbody></table>
<h2 id="1-2-文本格式化标签-熟记"><a href="#1-2-文本格式化标签-熟记" class="headerlink" title="1.2 文本格式化标签(熟记)"></a>1.2 文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p>
<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/tab.png">

<p><strong>区别：</strong></p>
<p> b  只是加粗          strong  除了可以加粗还有 强调的意思，  语义更强烈。</p>
<p>剩下的同理…    </p>
<blockquote>
<p>请同学们重点记住 前两组   加粗 和 倾斜   后面两组没记住回来查</p>
</blockquote>
<h2 id="1-3-标签属性"><a href="#1-3-标签属性" class="headerlink" title="1.3 标签属性"></a>1.3 标签属性</h2> <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/ttt.jpg" width="300">

<p>所谓属性就是<strong>外在特性</strong>  比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p>
<ul>
<li>手机的颜色是黑色   </li>
<li>手机的尺寸是 8寸 </li>
<li>水平线的长度是 200  </li>
<li>图片的宽度 是  300    </li>
</ul>
<p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">手机</span> 颜色=<span class="string">"红色"</span> 大小=<span class="string">"5寸"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">手机</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-4-图像标签img-重点"><a href="#1-4-图像标签img-重点" class="headerlink" title="1.4 图像标签img (重点)"></a>1.4 图像标签img (重点)</h2><p>单词缩写：   image  图像</p>
<p>要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img>以及和他相关的属性。（它是一个单身狗）</p>
<p>语法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p>
<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/img.png">

<p>border 后面我们会用css来做，这里童鞋们就记住这个border 单词就好了</p>
<p>*<em>注意: *</em></p>
<ol>
<li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</li>
<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li>
<li>采取  键值对 的格式   key=”value”  的格式  </li>
</ol>
<p>比如:  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">正常的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    带有边框的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"3"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">有提示文本的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"3"</span> <span class="attr">title</span>=<span class="string">"这是个小蒲公英"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">有替换文本的<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"cz.jpg"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"3"</span> <span class="attr">alt</span>=<span class="string">"图片不存在"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>此处有练习题</p>
<p><strong>重点掌握点：</strong></p>
<ul>
<li><input disabled type="checkbox"> 请说出 图像标签那个属性是必须要写的？</li>
<li><input disabled type="checkbox"> 请说出 图像标签中 alt 和  title 属性区别？ </li>
</ul>
<h2 id="1-5-链接标签-重点"><a href="#1-5-链接标签-重点" class="headerlink" title="1.5 链接标签(重点)"></a>1.5 链接标签(重点)</h2><p>单词缩写：  anchor 的缩写  [ˈæŋkə(r)] 。基本解释 锚, 铁锚 的</p>
<p>在HTML中创建超链接非常简单，只需用标签把文字包括起来就好。</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>href</td>
<td align="left">用于指定链接目标的url地址，（必须属性）当为标签应用href属性时，它就具有了超链接的功能</td>
</tr>
<tr>
<td>target</td>
<td align="left">用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，__blank为在新窗口中打开方式。</td>
</tr>
</tbody></table>
<p><strong>注意：</strong></p>
<ol>
<li>外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li>
<li>内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </li>
<li>如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li>
<li>不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li>
</ol>
<p><strong>重点掌握点：</strong></p>
<ul>
<li><input disabled type="checkbox"> 请说出 链接标签那个属性是必须要写的？  </li>
<li><input disabled type="checkbox"> 请说出 如何新窗口打开这个一个链接网页的？ </li>
</ul>
<h2 id="1-6-注释标签"><a href="#1-6-注释标签" class="headerlink" title="1.6 注释标签"></a>1.6 注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。</p>
<p>简单解释：</p>
<p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>     快捷键是：    ctrl + /       或者 ctrl +shift + /</span><br></pre></td></tr></table></figure>



<p>注释重要性：</p>
<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/zs.png">

<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
<p>注释是给人看的，目的是为了更好的解释这部分代码是干啥的， 程序是不执行这个代码的</p>
</blockquote>
<h3 id="团队约定"><a href="#团队约定" class="headerlink" title="团队约定"></a>团队约定</h3><p>一般用于简单的描述，如某些状态描述、属性描述等</p>
<p>注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Comment Text --&gt;</span><br><span class="line">&lt;div&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;...&lt;&#x2F;div&gt;&lt;!-- Comment Text --&gt;	</span><br><span class="line">	</span><br><span class="line">&lt;div&gt;&lt;!-- Comment Text --&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h1 id="2-路径-重点、难点"><a href="#2-路径-重点、难点" class="headerlink" title="2. 路径(重点、难点)"></a>2. 路径(重点、难点)</h1><img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/dt.png" width="400">



<p>实际工作中，我们的文件不能随便乱放，否则用起来很难快速的找到他们，因此我们需要一个文件夹来管理他们。</p>
<p>*<em>目录文件夹： *</em></p>
<p>就是普通文件夹，里面只不过存放了我们做页面所需要的 相关素材，比如 html文件， 图片 等等。</p>
 <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/g.png">

<p>*<em>根目录 *</em>  </p>
<p>打开目录文件夹的第一层  就是 根目录 </p>
 <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/gg.png">

<p>页面中的图片会非常多， 通常我们再新建一个文件夹专门用于存放图像文件（images），这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。路径可以分为： 相对路径和绝对路径</p>
<h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p>
<table>
<thead>
<tr>
<th>路径分类</th>
<th align="center">符号</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>同一级路径</td>
<td align="center"></td>
<td align="left">只需输入图像文件的名称即可，如&lt;img src=”baidu.gif” /&gt;。<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/04路径同目录.jpg"></td>
</tr>
<tr>
<td>下一级路径</td>
<td align="center">“/”</td>
<td align="left">图像文件位于HTML文件同级文件夹下（例如文件夹名称为：images）                         如&lt;img src=”images/baidu.gif” /&gt;。  <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/05路径不同.jpg"></td>
</tr>
<tr>
<td>上一级路径</td>
<td align="center">“../”</td>
<td align="left">在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，                    如&lt;img src=”../baidu.gif” /&gt;。 <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/06路径不同.jpg"></td>
</tr>
</tbody></table>
<p>*<em>pink老师 一句话说出他们: *</em></p>
<blockquote>
<p>相对路径，是从代码所在的这个文件出发， 去寻找我们的目标文件的，而 我们所说的 上一级 下一级 同一级  简单说，就是 图片 位于 HTML 页面的位置</p>
</blockquote>
<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的。</p>
<p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a></p>
<p><strong>注意：</strong></p>
<p>绝对路径用的较少，我们理解下就可以了。  但是要注意，它的写法 特别是符号  \  并不是 相对路径的   /    </p>
<h1 id="3-今日总结"><a href="#3-今日总结" class="headerlink" title="3. 今日总结"></a>3. 今日总结</h1><p>  每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt;  能用常用标签，写出最简单的页面</p>
<p>学HTML 之前 觉得 很神秘  </p>
 <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/z.png">

<p>等你学完之后忽然发现</p>
 <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/rh.jpg" width="615">



<p>总结今天的思路贯穿线：</p>
<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/a.png" width="1000">



<h1 id="4-综合案例：-圣诞"><a href="#4-综合案例：-圣诞" class="headerlink" title="4. 综合案例：  圣诞"></a>4. 综合案例：  圣诞</h1><h1 id="5-拓展阅读"><a href="#5-拓展阅读" class="headerlink" title="5. @拓展阅读"></a>5. @拓展阅读</h1><h4 id="5-1-锚点定位-（难点）"><a href="#5-1-锚点定位-（难点）" class="headerlink" title="5.1 锚点定位 （难点）"></a>5.1 锚点定位 （难点）</h4><p>通过创建锚点链接，用户能够快速定位到目标内容。</p>
<p>创建锚点链接分为两步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 使用相应的id名标注跳转目标的位置。 (找目标)</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">2. 使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#id名"</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的） （拉关系）  我也有一个姓毕的姥爷..</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span></span><br></pre></td></tr></table></figure>

 <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/Users/itcast/Desktop/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80HTML%E7%AC%AC%E4%B8%80%E5%A4%A9/%E7%AC%94%E8%AE%B0/media/03a%E7%9B%AE%E6%A0%87.jpg">

<p>快速记忆法：</p>
<p> 好比找个人办事，  首先找到他，然后拉关系，最后看效果。</p>
<h4 id="5-2-base-标签"><a href="#5-2-base-标签" class="headerlink" title="5.2 base 标签"></a>5.2 base 标签</h4><p><strong>语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/Users/itcast/Desktop/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80HTML%E7%AC%AC%E4%B8%80%E5%A4%A9/%E7%AC%94%E8%AE%B0/media/base.png">

<p>*<em>总结： *</em></p>
<ol>
<li>base 可以设置整体链接的打开状态   </li>
<li>base 写到  <head>  </head>  之间</li>
<li>把所有的连接 都默认添加 target=”_blank”</li>
</ol>
<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
<p>全体链接~ 到 ~  全体集合  所有链接 以新窗口打开页面  ~   是 </p>
</blockquote>
<h4 id="5-3-预格式化文本pre标签"><a href="#5-3-预格式化文本pre标签" class="headerlink" title="5.3 预格式化文本pre标签"></a>5.3 预格式化文本pre标签</h4><pre> 标签可定义预格式化的文本。

被包围在 <pre> 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  此例演示如何使用 pre 标签</span><br><span class="line"></span><br><span class="line">  对空行和 空格</span><br><span class="line"></span><br><span class="line">  进行控制</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

**pink老师 一句话说出他们:**

> 所谓的预格式化文本就是 ，按照我们预先写好的文字格式来显示页面， 保留空格和换行等。 

有了这个标签，里面的文字，会按照我们书写的模式显示，不需要段落和换行标签了。但是，比较少用，因为不好整体控制。



#### 5.4 特殊字符 （理解）

 一些特殊的符号，我们再html 里面很难或者 不方便直接 使用， 我们此时可以使用下面的替代代码。

<img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/zifu.png">

**虽然有很多，但是我们平时用的比较较少， 大家重点记住   空格    大于号 小于号   就可以了，剩下的回来查阅。**

**总结：**

1. 是以**运算符**`&`开头,以**分号运算符**`;`结尾。
2. 他们不是标签，而是符号。
3. HTML 中不能使用小于号 “<” 和大于号 “>”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体

**团队约定**

   *推荐：*

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot;&gt;more &gt;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

   *不推荐：*

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot;&gt;more &gt;&gt; &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>


#### 5.5 html5发展之路



 <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/html5.png" width="600">



#### 5.6 什么是XHTML

XHTML 是更严格更纯净的 HTML 代码。

- XHTML 指**可扩展超文本标签语言**（EXtensible HyperText Markup Language）。
- XHTML 的目标是取代 HTML。
- XHTML 与 HTML 4.01 几乎是相同的。
- XHTML 是更严格更纯净的 HTML 版本。
- XHTML 是作为一种 XML 应用被重新定义的 HTML。
- XHTML 是一个 W3C 标准。

#### 5.7 HTML和 XHTML之间有什么区别?

- XHTML 指的是可扩展超文本标记语言
- XHTML 与 HTML 4.01 几乎是相同的
- XHTML 是更严格更纯净的 HTML 版本
- XHTML 是以 XML 应用的方式定义的 HTML
- XHTML 是 2001 年 1 月发布的 W3C 推荐标准
- XHTML 得到所有主流浏览器的支持
- XHTML 元素是以 XML 格式编写的 HTML 元素。XHTML是严格版本的HTML，例如它要求标签必须小写，标签必须被正确关闭，标签顺序必须正确排列，对于属性都必须使用双引号等。

# 6. @深入阅读

[HTML5的崛起之路](http://www.chinaz.com/manage/2015/0720/424831.shtml)

# 7. 预习内容

- 表格标签

- 能够通过表格标签能够写出一个简版表格数据展示 

  例如： 

  <img src="/2020/12/26/03-HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/qq.png">

    可以把你今天学习的内容放在表格内，再次作为总结

  ​</”></pre></pre>]]></content>
  </entry>
  <entry>
    <title>04-表格 table(会使用)</title>
    <url>/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.表格</p>
</blockquote>
<h1 id="HTML-第二天目标"><a href="#HTML-第二天目标" class="headerlink" title="HTML 第二天目标"></a>HTML 第二天目标</h1><p> 能够利用表格、列表和表单完成注册页面的综合案例</p>
<ul>
<li>能出说表格用来做什么的</li>
<li>能说出列表用来做什么的</li>
<li>能说出表单用来做什么的</li>
</ul>
<p>为了让我们页面显示的更加整齐，我们需要学习三个表（表格、表单、列表）</p>
<a id="more"></a>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/guifan.png">

<h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p>目标：</p>
<ul>
<li>理解：<ul>
<li>能说出表格用来做什么的</li>
<li>表格的基本结构组成</li>
</ul>
</li>
<li>应用：<ul>
<li>能够熟练写出n行n列的表格</li>
<li>能简单的合并单元格<br>​</li>
</ul>
</li>
</ul>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/ttt.png" width="600">



<p><strong>表格作用：</strong></p>
<p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，<strong>常见显示、展示表格式数据。</strong></p>
<p>因为它可以让数据显示的非常的规整，可读性非常好。</p>
<p><strong>特别是后台展示数据的时候表格运用是否熟练就显得很重要</strong>，一个清爽简约的表格能够把繁杂的数据表现得很有条理，虽然 div 布局也可以做到，但是总没有表格来得方便。</p>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/table.png">

<p>ps:  这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说  PPAP i hava a pen  </p>
<h2 id="1-创建表格"><a href="#1-创建表格" class="headerlink" title="1. 创建表格"></a>1. 创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。</p>
<p><strong>创建表格的基本语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要深刻体会表格、行、单元格他们的构成。</p>
<p>在上面的语法中包含基本的三对HTML标签，分别为 table、tr、td，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释</p>
<ol>
<li><p>table用于定义一个表格标签。</p>
</li>
<li><p>tr标签 用于定义表格中的行，必须嵌套在 table标签中。</p>
</li>
<li><p>td 用于定义表格中的单元格，必须嵌套在<tr></tr>标签中。</p>
</li>
<li><p>字母 td 指表格数据（table data），即数据单元格的内容，现在我们明白，表格最合适的地方就是用来存储数据的。</p>
<p>​</p>
</li>
</ol>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/07table基本结构.jpg">

<p>*<em>总结： *</em></p>
<ul>
<li>表格的主要目的是用来显示特殊数据的</li>
<li>一个完整的表格有表格标签（table），行标签（tr），单元格标签（td）组成，没有列的标签</li>
</ul>
<ul>
<li><tr></tr>中只能嵌套<td></td> 类的单元格</li>
<li><td></td>标签，他就像一个容器，可以容纳所有的元素

</li>
</ul>
<h2 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2. 表格属性"></a>2. 表格属性</h2><p>表格有部分属性我们不常用，这里重点记住 cellspacing 、 cellpadding。</p>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/tt.png">

<p>我们经常有个说法，是三参为0，  平时开发的我们这三个参数    border  cellpadding  cellspacing  为  0</p>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/07table表格属性.jpg">

<p><strong>案例1：</strong></p>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/表格效果01.png">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellpadding</span>=<span class="string">"20"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>   <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>55<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>52<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>58<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>黎明<span class="tag">&lt;/<span class="name">td</span>&gt;</span>   <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘晓庆<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>63<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-表头单元格标签th"><a href="#3-表头单元格标签th" class="headerlink" title="3. 表头单元格标签th"></a>3. 表头单元格标签th</h2><ul>
<li><p>作用：</p>
<ul>
<li>一般表头单元格位于表格的第一行或第一列，并且文本加粗居中</li>
</ul>
</li>
<li><p>语法：</p>
<ul>
<li>只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。 </li>
</ul>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/th.png">

</li>
</ul>
<p><strong>案例2：</strong></p>
<p>​    效果图</p>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/tht.png">

<p>​    代码：</p>
<hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">th</span>&gt;</span>电话<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>小王<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>110<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span>120<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
<p>th 也是一个单元格   只不过和普通的 td单元格不一样，它会让自己里面的文字居中且加粗</p>
</blockquote>
<h2 id="4-表格标题caption"><a href="#4-表格标题caption" class="headerlink" title="4. 表格标题caption"></a>4. 表格标题caption</h2><p><strong>定义和用法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>*<em>注意： *</em></p>
<ol>
<li>caption 元素定义<strong>表格标题</strong>，通常这个标题会被居中且显示于表格之上。</li>
<li>caption 标签必须紧随 table 标签之后。</li>
<li>这个标签只存在 表格里面才有意义。你是风儿我是沙</li>
</ol>
<p><strong>案例3：</strong></p>
<p>根据要求完成以下案例：</p>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/pa.png">



<h2 id="5-合并单元格-难点"><a href="#5-合并单元格-难点" class="headerlink" title="5. 合并单元格(难点)"></a>5. 合并单元格(难点)</h2><p>合并单元格是我们比较常用的一个操作，但是不会合并的很复杂。</p>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/he.jpg">

<h3 id="5-1-合并单元格2种方式"><a href="#5-1-合并单元格2种方式" class="headerlink" title="5.1 合并单元格2种方式"></a>5.1 合并单元格2种方式</h3><ul>
<li>跨行合并：rowspan=”合并单元格的个数”      </li>
<li>跨列合并：colspan=”合并单元格的个数”</li>
</ul>
<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/08table合并单元格.jpg">

<h3 id="5-2-合并单元格顺序"><a href="#5-2-合并单元格顺序" class="headerlink" title="5.2 合并单元格顺序"></a>5.2 合并单元格顺序</h3><blockquote>
<p>*<em>合并的顺序我们按照   先上 后下     先左  后右 的顺序 *</em></p>
</blockquote>
<p>跟我们以前学习汉字的书写顺序完全一致。</p>
<h3 id="5-3-合并单元格三步曲"><a href="#5-3-合并单元格三步曲" class="headerlink" title="5.3 合并单元格三步曲"></a>5.3 合并单元格三步曲</h3><ol>
<li>先确定是跨行还是跨列合并</li>
<li>根据 先上 后下   先左  后右的原则找到目标单元格    然后写上 合并方式 还有 要合并的单元格数量  比如 ： <td colspan="3">   </td></li>
<li>删除多余的单元格 单元格      </li>
</ol>
<h2 id="6-总结表格"><a href="#6-总结表格" class="headerlink" title="6. 总结表格"></a>6. 总结表格</h2><table>
<thead>
<tr>
<th>标签名</th>
<th align="left">定义</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td><table></table></td>
<td align="left">表格标签</td>
<td align="left">就是一个四方的盒子</td>
</tr>
<tr>
<td></td></tr><tr></tr>
<td align="left">表格行标签</td>
<td align="left">行标签要再table标签内部才有意义</td>

<tr>
<td></td><td></td>
<td align="left">单元格标签</td>
<td align="left">单元格标签是个容器级元素，可以放任何东西</td>
</tr>
<tr>
<td><th></th></td>
<td align="left">表头单元格标签</td>
<td align="left">它还是一个单元格，但是里面的文字会居中且加粗</td>
</tr>
<tr>
<td><caption></caption></td>
<td align="left">表格标题标签</td>
<td align="left">表格的标题，跟着表格一起走，和表格居中对齐</td>
</tr>
<tr>
<td>clospan 和 rowspan</td>
<td align="left">合并属性</td>
<td align="left">用来合并单元格的</td>
</tr>
</tbody></table>
<ol>
<li>表格提供了HTML 中定义表格式数据的方法。</li>
<li>表格中由行中的单元格组成。</li>
<li>表格中没有列元素，列的个数取决于行的单元格个数。</li>
<li>表格不要纠结于外观，那是CSS 的作用。</li>
<li>表格的学习要求：  能手写表格结构，并且能简单合并单元格。</li>
</ol>
<h2 id="7-拓展阅读"><a href="#7-拓展阅读" class="headerlink" title="7. 拓展阅读@"></a>7. 拓展阅读@</h2><h3 id="表格划分结构（了解）"><a href="#表格划分结构（了解）" class="headerlink" title="表格划分结构（了解）"></a>表格划分结构（了解）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于比较复杂的表格，表格的结构也就相对的复杂了，所以又将表格分割成三个部分：题头、正文和脚注。而这三部分分别用:thead,tbody,tfoot来标注， 这样更好的分清表格结构</span><br></pre></td></tr></table></figure>





<img src="/2020/12/26/04-%E8%A1%A8%E6%A0%BC%20table(%E4%BC%9A%E4%BD%BF%E7%94%A8)/%E7%AC%94%E8%AE%B0/media/thead.png">

<p><strong>注意：</strong></p>
<ol>
<li><thead></thead>：用于定义表格的头部。用来放标题之类的东西。<thead> 内部必须拥有 <tr> 标签！</tr></thead></li>
<li><tbody></tbody>：用于定义表格的主体。放数据本体 。</li>
<li><tfoot></tfoot>放表格的脚注之类。</li>
<li>以上标签都是放到table标签中。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>CSS第三天-盒子模型</title>
    <url>/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.盒子模型</p>
</blockquote>
<h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>css学习三大重点： css 盒子模型   、  浮动  、  定位  </p>
<a id="more"></a>
<p>主题思路：</p>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/day3.png">

<p>目标： </p>
<ul>
<li>理解：<ul>
<li>能说出盒子模型有那四部分组成</li>
<li>能说出内边距的作用以及对盒子的影响</li>
<li>能说出padding设置不同数值个数分别代表的意思</li>
<li>能说出块级盒子居中对齐需要的2个条件</li>
<li>能说出外边距合并的解决方法</li>
</ul>
</li>
<li>应用：<ul>
<li>能利用边框复合写法给元素添加边框</li>
<li>能计算盒子的实际大小</li>
<li>能利用盒子模型布局模块案例</li>
</ul>
</li>
</ul>
<h2 id="1-看透网页布局的本质"><a href="#1-看透网页布局的本质" class="headerlink" title="1.看透网页布局的本质"></a>1.看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/t.png">

<ul>
<li><p>看透网页布局的本质：</p>
<ul>
<li>首先利用CSS设置好盒子的大小，然后摆放盒子的位置。</li>
<li>最后把网页元素比如文字图片等等，放入盒子里面。</li>
<li>以上两步 就是网页布局的本质</li>
</ul>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/t1.png">

</li>
</ul>
<p>我们明白了，盒子是网页布局的关键点，所以我们更应该弄明白 这个盒子有什么特点。</p>
<h2 id="2-盒子模型（Box-Model）"><a href="#2-盒子模型（Box-Model）" class="headerlink" title="2. 盒子模型（Box Model）"></a>2. 盒子模型（Box Model）</h2><ul>
<li><p>所谓盒子模型：</p>
<ul>
<li>就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</li>
</ul>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/盒子模型.png">

 <img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/boxs.png" width="700">

<p><strong>pink老师总结：</strong></p>
<ul>
<li>盒子模型有元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</li>
<li>盒子里面的文字和图片等元素是 内容区域</li>
<li>盒子的厚度 我们成为 盒子的边框 </li>
<li>盒子内容与边框的距离是内边距（类似单元格的 cellpadding)</li>
<li>盒子与盒子之间的距离是外边距（类似单元格的 cellspacing）</li>
</ul>
</li>
</ul>
<p><strong>标准盒子模型</strong></p>
 <img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/标准盒子模型.png">

<h2 id="3-盒子边框（border）"><a href="#3-盒子边框（border）" class="headerlink" title="3. 盒子边框（border）"></a>3. 盒子边框（border）</h2><p>​    <img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/盒子边框.png"></p>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td align="center">定义边框粗细，单位是px</td>
</tr>
<tr>
<td>border-style</td>
<td align="center">边框的样式</td>
</tr>
<tr>
<td>border-color</td>
<td align="center">边框颜色</td>
</tr>
</tbody></table>
<ul>
<li>边框的样式：<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线  </li>
<li>dotted：边框为点线</li>
</ul>
</li>
</ul>
<h3 id="3-1-边框综合设置"><a href="#3-1-边框综合设置" class="headerlink" title="3.1 边框综合设置"></a>3.1 边框综合设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  没有顺序</span><br></pre></td></tr></table></figure>



<h3 id="3-2-盒子边框写法总结表"><a href="#3-2-盒子边框写法总结表" class="headerlink" title="3.2 盒子边框写法总结表"></a>3.2 盒子边框写法总结表</h3><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p>
<table>
<thead>
<tr>
<th align="left">上边框</th>
<th align="left">下边框</th>
<th align="left">左边框</th>
<th align="left">右边框</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-top-style:样式;</td>
<td align="left">border-bottom-style:样式;</td>
<td align="left">border-left-style:样式;</td>
<td align="left">border-right-style:样式;</td>
</tr>
<tr>
<td align="left">border-top-width:宽度;</td>
<td align="left">border- bottom-width:宽度;</td>
<td align="left">border-left-width:宽度;</td>
<td align="left">border-right-width:宽度;</td>
</tr>
<tr>
<td align="left">border-top-color:颜色;</td>
<td align="left">border- bottom-color:颜色;</td>
<td align="left">border-left-color:颜色;</td>
<td align="left">border-right-color:颜色;</td>
</tr>
<tr>
<td align="left">border-top:宽度 样式 颜色;</td>
<td align="left">border-bottom:宽度 样式 颜色;</td>
<td align="left">border-left:宽度 样式 颜色;</td>
<td align="left">border-right:宽度 样式 颜色;</td>
</tr>
</tbody></table>
<h3 id="3-3-表格的细线边框"><a href="#3-3-表格的细线边框" class="headerlink" title="3.3 表格的细线边框"></a>3.3 表格的细线边框</h3> <img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/表格边框.png">

<ul>
<li><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</p>
</li>
<li><p>但是两个单元格之间的边框会出现重叠，从而使边框变粗</p>
</li>
<li><p>通过css属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table&#123; border-collapse:collapse; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>collapse 单词是合并的意思</li>
<li>border-collapse:collapse; 表示相邻边框合并在一起。</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">	<span class="selector-tag">table</span> &#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">		<span class="attribute">text-align</span>: center;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">table</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*合并相邻边框*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

 <img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/边框合并.png">

<h2 id="4-内边距（padding）"><a href="#4-内边距（padding）" class="headerlink" title="4. 内边距（padding）"></a>4. 内边距（padding）</h2> <img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/16内边距.png">

<h3 id="4-1-内边距："><a href="#4-1-内边距：" class="headerlink" title="4.1 内边距："></a>4.1 内边距：</h3><p>​    padding属性用于设置内边距。 <strong>是指 边框与内容之间的距离。</strong></p>
<h3 id="4-2-设置"><a href="#4-2-设置" class="headerlink" title="4.2 设置"></a>4.2 设置</h3><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>padding-left</td>
<td align="left">左内边距</td>
</tr>
<tr>
<td>padding-right</td>
<td align="left">右内边距</td>
</tr>
<tr>
<td>padding-top</td>
<td align="left">上内边距</td>
</tr>
<tr>
<td>padding-bottom</td>
<td align="left">下内边距</td>
</tr>
</tbody></table>
<p>当我们给盒子指定padding值之后， 发生了2件事情：</p>
<ol>
<li><p>内容和边框 有了距离，添加了内边距。</p>
</li>
<li><p>盒子会变大了。</p>
<p><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/w.jpg"><strong>注意：  后面跟几个数值表示的意思是不一样的。</strong></p>
</li>
</ol>
<p>我们分开写有点麻烦，我们可以不可以简写呢？</p>
<table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>1个值</td>
<td>padding：上下左右内边距;</td>
</tr>
<tr>
<td>2个值</td>
<td>padding: 上下内边距    左右内边距 ；</td>
</tr>
<tr>
<td>3个值</td>
<td>padding：上内边距   左右内边距   下内边距；</td>
</tr>
<tr>
<td>4个值</td>
<td>padding: 上内边距 右内边距 下内边距 左内边距 ；</td>
</tr>
</tbody></table>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/顺时针.jpg">

<p><strong>课堂一练：</strong></p>
<p>请写出如下内边距：</p>
<ol>
<li>要求盒子有一个左边内边距是 5像素</li>
<li>要求简写的形式写出  一个盒子上下是 25像素   左右是15像素。</li>
<li>要求简写的形式写出 一个盒子  上内边距是 12像素  下内边距是 0  左内边距是 25像素  右内边距是 10像素</li>
</ol>
<h3 id="4-3-课堂案例：-新浪导航"><a href="#4-3-课堂案例：-新浪导航" class="headerlink" title="4.3 课堂案例：  新浪导航"></a>4.3 课堂案例：  新浪导航</h3><p>新浪导航栏的核心就是因为里面的字数不一样多，所以我们不方便给宽度，还是给padding ，撑开盒子的。</p>
 <img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/al.gif">

<h3 id="4-4-内盒尺寸计算（元素实际大小）"><a href="#4-4-内盒尺寸计算（元素实际大小）" class="headerlink" title="4.4 内盒尺寸计算（元素实际大小）"></a>4.4 内盒尺寸计算（元素实际大小）</h3><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/盒模型大小.png">

<ul>
<li><p>宽度</p>
<p>Element Height = content height + padding + border （Height为内容高度）</p>
</li>
<li><p>高度</p>
<p> Element Width = content width + padding + border （Width为内容宽度）</p>
</li>
<li><p>盒子的实际的大小 =   内容的宽度和高度 +  内边距   +  边框   </p>
</li>
</ul>
<h3 id="4-5-内边距产生的问题"><a href="#4-5-内边距产生的问题" class="headerlink" title="4.5 内边距产生的问题"></a>4.5 内边距产生的问题</h3><ul>
<li><p>问题</p>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/31padding问题.png">

<p>会撑大原来的盒子</p>
</li>
<li><p>解决：</p>
<p>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小</p>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/32padding问题解决.png">




</li>
</ul>
<p><strong>课堂一练</strong></p>
<ol>
<li>一个盒子宽度为100， padding为 10， 边框为5像素，问这个盒子实际的宽度的是（）</li>
</ol>
<ul>
<li><input checked disabled type="checkbox"> <p>(A) 130</p>
</li>
<li><input disabled type="checkbox"> <p>(B) 135 </p>
</li>
<li><input disabled type="checkbox"> <p>(C) 125</p>
</li>
<li><input disabled type="checkbox"> <p>(D) 115</p>
<p>100 +  20 + 10 </p>
</li>
</ul>
<ol start="2">
<li>关于根据下列代码计算 盒子宽高下列说法正确的是（）</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">         <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">border-top</span>: <span class="number">5px</span> solid blue;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled type="checkbox"> (A) 宽度为200px 高度为200px</li>
<li><input checked disabled type="checkbox"> (B) 宽度为352px 高度为306px</li>
<li><input disabled type="checkbox"> (C) 宽度为302px 高度为307px</li>
<li><input disabled type="checkbox"> (D) 宽度为302px 高度为252px</li>
</ul>
<p>w  200 +   150   + 2   =  352</p>
<p>h   200 +  100 +  6   =  306 </p>
<h3 id="4-6-padding不影响盒子大小情况"><a href="#4-6-padding不影响盒子大小情况" class="headerlink" title="4.6 padding不影响盒子大小情况"></a>4.6 padding不影响盒子大小情况</h3><blockquote>
<p>如果没有给一个盒子指定宽度， 此时，如果给这个盒子指定padding， 则不会撑开盒子。</p>
</blockquote>
<h2 id="5-外边距（margin）"><a href="#5-外边距（margin）" class="headerlink" title="5. 外边距（margin）"></a>5. 外边距（margin）</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/18margin外边距.png">

<h3 id="5-1-外边距"><a href="#5-1-外边距" class="headerlink" title="5.1 外边距"></a>5.1 外边距</h3><p>​    margin属性用于设置外边距。  margin就是控制<strong>盒子和盒子之间的距离</strong></p>
<h3 id="5-2-设置："><a href="#5-2-设置：" class="headerlink" title="5.2 设置："></a>5.2 设置：</h3><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>margin-left</td>
<td align="left">左外边距</td>
</tr>
<tr>
<td>margin-right</td>
<td align="left">右外边距</td>
</tr>
<tr>
<td>margin-top</td>
<td align="left">上外边距</td>
</tr>
<tr>
<td>margin-bottom</td>
<td align="left">下外边距</td>
</tr>
</tbody></table>
<p>margin值的简写 （复合写法）代表意思  跟 padding 完全相同。</p>
<h3 id="5-3-块级盒子水平居中"><a href="#5-3-块级盒子水平居中" class="headerlink" title="5.3 块级盒子水平居中"></a>5.3 块级盒子水平居中</h3><ul>
<li>可以让一个块级盒子实现水平居中必须：<ul>
<li>盒子必须指定了宽度（width）</li>
<li>然后就给<strong>左右的外边距都设置为auto</strong>，</li>
</ul>
</li>
</ul>
<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure>

<p>常见的写法，以下下三种都可以。</p>
<ul>
<li>margin-left: auto;   margin-right: auto;</li>
<li>margin: auto;</li>
<li>margin: 0 auto;</li>
</ul>
<h3 id="5-4-文字居中和盒子居中区别"><a href="#5-4-文字居中和盒子居中区别" class="headerlink" title="5.4 文字居中和盒子居中区别"></a>5.4 文字居中和盒子居中区别</h3><ol>
<li>盒子内的文字水平居中是  text-align: center,  而且还可以让 行内元素和行内块居中对齐</li>
<li>块级盒子水平居中  左右margin 改为 auto </li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>; <span class="comment">/*  文字 行内元素 行内块元素水平居中 */</span></span><br><span class="line"><span class="selector-tag">margin</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">auto</span>;  <span class="comment">/* 块级盒子水平居中  左右margin 改为 auto 就阔以了 上下margin都可以 */</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-插入图片和背景图片区别"><a href="#5-5-插入图片和背景图片区别" class="headerlink" title="5.5 插入图片和背景图片区别"></a>5.5 插入图片和背景图片区别</h3><ol>
<li>插入图片 我们用的最多 比如产品展示类  移动位置只能靠盒模型 padding margin</li>
<li>背景图片我们一般用于小图标背景 或者 超大背景图片  背景图片 只能通过  background-position</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;  </span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">	<span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">	<span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(images/sun.jpg) no-repeat;</span><br><span class="line">	<span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更改位置 我用 background-position */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-6-清除元素的默认内外边距-重要"><a href="#5-6-清除元素的默认内外边距-重要" class="headerlink" title="5.6 清除元素的默认内外边距(重要)"></a>5.6 清除元素的默认内外边距(重要)</h3><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/19清除内外边距.png">

<p>为了更灵活方便地控制网页中的元素，制作网页时，我们需要将元素的默认内外边距清除</p>
<p>代码： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：  </p>
<ul>
<li>行内元素为了照顾兼容性， 尽量只设置左右内外边距， 不要设置上下内外边距。</li>
</ul>
<h3 id="5-7-外边距合并"><a href="#5-7-外边距合并" class="headerlink" title="5.7 外边距合并"></a>5.7 外边距合并</h3><p>使用margin定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。</p>
<h4 id="1-相邻块元素垂直外边距的合并"><a href="#1-相邻块元素垂直外边距的合并" class="headerlink" title="(1). 相邻块元素垂直外边距的合并"></a>(1). 相邻块元素垂直外边距的合并</h4><ul>
<li><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</p>
</li>
<li><p>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</p>
</li>
<li><p><strong>取两个值中的较大者</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/www.png">

</li>
</ul>
<p><strong>解决方案：尽量给只给一个盒子添加margin值</strong>。</p>
<h4 id="2-嵌套块元素垂直外边距的合并（塌陷）"><a href="#2-嵌套块元素垂直外边距的合并（塌陷）" class="headerlink" title="(2). 嵌套块元素垂直外边距的合并（塌陷）"></a>(2). 嵌套块元素垂直外边距的合并（塌陷）</h4><ul>
<li><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框</p>
</li>
<li><p>父元素的上外边距会与子元素的上外边距发生合并</p>
</li>
<li><p>合并后的外边距为两者中的较大者</p>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/n.png">

</li>
</ul>
<p><strong>解决方案：</strong></p>
<ol>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距</li>
<li>可以为父元素添加overflow:hidden。</li>
</ol>
<p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有问题，后面咱们再总结。。。</p>
<h2 id="6-盒子模型布局稳定性"><a href="#6-盒子模型布局稳定性" class="headerlink" title="6. 盒子模型布局稳定性"></a>6. 盒子模型布局稳定性</h2><ul>
<li><p>学习完盒子模型，内边距和外边距，什么情况下用内边距，什么情况下用外边距？</p>
<ul>
<li>大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</li>
</ul>
</li>
</ul>
<p>我们根据稳定性来分，建议如下：</p>
<p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width &gt;  padding  &gt;   margin</span><br></pre></td></tr></table></figure>

<ul>
<li>原因：<ul>
<li>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</li>
<li>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</li>
<li>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</li>
</ul>
</li>
</ul>
<h2 id="7-ps基本操作以及常用快捷键："><a href="#7-ps基本操作以及常用快捷键：" class="headerlink" title="7. ps基本操作以及常用快捷键："></a>7. ps基本操作以及常用快捷键：</h2><p>因为网页美工大部分效果图都是利用ps 来做的，所以，以后我们大部分切图工作都是在ps里面完成。</p>
<ul>
<li>文件–打开 –  可以打开 我们要测量的图片</li>
<li>ctrl+r 可以打开标尺  或者  视图 –  标尺</li>
<li>右击标尺，  把里面的单位改为  像素  </li>
<li>ctrl+ 加号 键  可以 放大  视图  ctrl+ 减号 缩小视图</li>
<li>按住空格键，  鼠标可以 变成小手 ，拖动 ps 视图</li>
<li>用选区 拖动  可以 测量 大小 </li>
<li>ctrl+ d  可以取消选区  或者旁边空白处点击一下也可以取消选区</li>
</ul>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/ps2.png">

<h2 id="8-综合案例"><a href="#8-综合案例" class="headerlink" title="8. 综合案例"></a>8. 综合案例</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/lieb.png">

<h4 id="去掉列表默认的样式"><a href="#去掉列表默认的样式" class="headerlink" title="去掉列表默认的样式"></a>去掉列表默认的样式</h4><p>无序和有序列表前面默认的列表样式，在不同浏览器显示效果不一样，而且也比较难看，所以，我们一般上来就直接去掉这些列表样式就行了。 代码如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123; <span class="attribute">list-style</span>: none; &#125;</span><br></pre></td></tr></table></figure>



<h2 id="9-今日总结"><a href="#9-今日总结" class="headerlink" title="9. 今日总结"></a>9. 今日总结</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/day3.png">

<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展@"></a>拓展@</h1><p>以下我们讲的CSS3部分新属性， 但是我们遵循的原则是，以下内容，不会影响我们页面布局， 只是样式更好看了而已。</p>
<h2 id="1-圆角边框-CSS3"><a href="#1-圆角边框-CSS3" class="headerlink" title="1.圆角边框(CSS3)"></a>1.圆角边框(CSS3)</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/圆角.png">

<ul>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:length</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中每一个值可以为 数值或百分比的形式。 </p>
</li>
<li><p>技巧： 让一个正方形  变成圆圈 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius: 50%;</span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/radio.png">
</li>
</ul>
<ul>
<li><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/圆角.png"></li>
<li>以上效果图矩形的圆角， 就不要用 百分比了，因为百分比会是表示高度和宽度的一半。</li>
<li>而我们这里矩形就只用 用 高度的一半就好了。精确单位。</li>
</ul>
<h2 id="2-盒子阴影-CSS3"><a href="#2-盒子阴影-CSS3" class="headerlink" title="2. 盒子阴影(CSS3)"></a>2. 盒子阴影(CSS3)</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/阴影.png">

<ul>
<li>语法:</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">box-shadow:水平阴影 垂直阴影 模糊距离（虚实）  阴影尺寸（影子大小）  阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/26/CSS%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/1498467567011.png" alt="1498467567011"></p>
<ul>
<li>前两个属性是必须写的。其余的可以省略。</li>
<li>外阴影 (outset) 是默认的 但是不能写           想要内阴影可以写  inset </li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">			<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">			<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">			<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">			<span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line">			<span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line">			<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>);</span><br><span class="line">			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业的开始。</p>
<h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p>
<p>示例： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 并集选择器，每个选择器声明必须独占一行。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* good *&#x2F;</span><br><span class="line">.post,</span><br><span class="line">.page,</span><br><span class="line">.comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* bad *&#x2F;</span><br><span class="line">.post, .page, .comment &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【建议】 一般情况情况下，选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span>  <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>【强制】 属性定义后必须以分号结尾。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>05-列表和表单</title>
    <url>/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础.列表和表单</p>
</blockquote>
<h1 id="1-列表标签（重点）"><a href="#1-列表标签（重点）" class="headerlink" title="1. 列表标签（重点）"></a>1. 列表标签（重点）</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul>
<li>理解<ul>
<li>无序列表的应用场景</li>
<li>自定义列表的应用场景</li>
</ul>
</li>
<li>应用<ul>
<li>无序列表语法</li>
<li>自定义列表语法<a id="more"></a>
问？</li>
</ul>
</li>
</ul>
<p>前面我们知道表格一般用于数据展示的，但是网页中还是有很多跟表格类似的布局，如下图~~ 我们用什么做呢？</p>
 <img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/lili.png">

<p>答：</p>
<p>答案是列表， 那什么是列表？  表格是用来显示数据的，那么列表就是用来布局的。 因为非常整齐和自由</p>
 <img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/list.png">

<ul>
<li><p>概念：</p>
<p>容器里面装载着结构，样式一致的文字或图表的一种形式，叫列表</p>
</li>
<li><p>特点：</p>
<p>列表最大的特点就是  整齐 、整洁、 有序，跟表格类似，但是他可组合自由度会更高。</p>
</li>
</ul>
<h2 id="1-1-无序列表-ul-（重点）"><a href="#1-1-无序列表-ul-（重点）" class="headerlink" title="1.1 无序列表 ul （重点）"></a>1.1 无序列表 ul （重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p>
 <img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/ul.png">

<p><strong>脚下留心：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. &lt;ul&gt;&lt;&#x2F;ul&gt;中只能嵌套&lt;li&gt;&lt;&#x2F;li&gt;，直接在&lt;ul&gt;&lt;&#x2F;ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line">2. &lt;li&gt;与&lt;&#x2F;li&gt;之间相当于一个容器，可以容纳所有元素。</span><br><span class="line">3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</span><br></pre></td></tr></table></figure>

<h2 id="1-2-有序列表-ol-（了解）"><a href="#1-2-有序列表-ol-（了解）" class="headerlink" title="1.2  有序列表 ol （了解）"></a>1.2  有序列表 ol （了解）</h2><img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/gold.png">

<p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  所有特性基本与ul 一致。  但是实际中比 无序列表 用的少很多。</p>
<h2 id="1-3-自定义列表（理解）"><a href="#1-3-自定义列表（理解）" class="headerlink" title="1.3 自定义列表（理解）"></a>1.3 自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

 <img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/2.jpg"> 



<p>用的还可以：</p>
<img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/mix.png">

<img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/09自定义列表.jpg">

<h2 id="1-4-列表总结"><a href="#1-4-列表总结" class="headerlink" title="1.4 列表总结"></a>1.4 列表总结</h2><table>
<thead>
<tr>
<th>标签名</th>
<th align="center">定义</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td><ul></ul></td>
<td align="center"><strong>无序标签</strong></td>
<td align="left">里面只能包含li    没有顺序，我们以后布局中最常用的列表</td>
</tr>
<tr>
<td><ol></ol></td>
<td align="center">有序标签</td>
<td align="left">里面只能包含li    有顺序， 使用情况较少</td>
</tr>
<tr>
<td><dl></dl></td>
<td align="center">自定义列表</td>
<td align="left">里面有2个兄弟， dt 和 dd</td>
</tr>
</tbody></table>
<p>我们现在还没有学布局，现在只要保证2个点：</p>
<ol>
<li>学会什么时候用无序列表， 学会什么时候用自定义列表</li>
<li>无序列表和自定义列表代码怎么写？</li>
<li>具体的我们刚才看的布局，等我们学了css 在来全面布局。</li>
</ol>
<h1 id="2-表单标签-掌握"><a href="#2-表单标签-掌握" class="headerlink" title="2. 表单标签(掌握)"></a>2. 表单标签(掌握)</h1><p>目标：</p>
<ul>
<li>能写出最常用的注册类表单</li>
<li>能说出input表单常见属性</li>
</ul>
<p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p>
<img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/car.jpg" width="500">

<p>*<em>作用： *</em></p>
<p>表单目的是为了收集用户信息。</p>
<p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p>
<blockquote>
<p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p>
</blockquote>
<img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/bd.png">

<p>  *<em>表单控件： *</em></p>
<p>​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p>
<p>  <strong>提示信息：</strong></p>
<p>​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p>
<p>  <strong>表单域：</strong>  </p>
<p>​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p>
<h2 id="2-1-input-控件-重点"><a href="#2-1-input-控件-重点" class="headerlink" title="2.1 input 控件(重点)"></a>2.1 input 控件(重点)</h2><ul>
<li><p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"属性值"</span> <span class="attr">value</span>=<span class="string">"你好"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>input 输入的意思 </li>
<li>&lt;input /&gt;标签为单标签</li>
<li>type属性设置不同的属性值用来指定不同的控件类型</li>
<li>除了type属性还有别的属性</li>
</ul>
</li>
<li><p>常用属性：</p>
</li>
</ul>
<img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/input.png">



<h4 id="1-type-属性"><a href="#1-type-属性" class="headerlink" title="1. type 属性"></a>1. type 属性</h4><ul>
<li>这个属性通过改变值，可以决定了你属于那种input表单。</li>
<li>比如 type = ‘text’  就表示 文本框 可以做 用户名， 昵称等。</li>
<li>比如 type = ‘password’  就是表示密码框   用户输入的内容 是不可见的。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span> </span><br><span class="line">密  码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-value属性-值"><a href="#2-value属性-值" class="headerlink" title="2. value属性   值"></a>2. value属性   值</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>value 默认的文本值。 有些表单想刚打开页面就默认显示几个文字，就可以通过这个value 来设置。</li>
</ul>
<h4 id="3-name属性"><a href="#3-name属性" class="headerlink" title="3. name属性"></a>3. name属性</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">name</span>=<span class="string">“username”</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>name表单的名字， 这样，后台可以通过这个name属性找到这个表单。  页面中的表单很多，name主要作用就是用于区别不同的表单。</p>
<ul>
<li>name属性后面的值，是我们自己定义的。</li>
</ul>
<ul>
<li>radio  如果是一组，我们必须给他们命名相同的名字 name   这样就可以多个选其中的一个啦</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>  /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>

<ul>
<li>name属性，我们现在用的较少， 但是，当我们学ajax 和后台的时候，是必须的。</li>
</ul>
<h4 id="4-checked属性"><a href="#4-checked属性" class="headerlink" title="4. checked属性"></a>4. checked属性</h4><ul>
<li>表示默认选中状态。  较常见于 单选按钮和复选按钮。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性    别:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> /&gt;</span>女</span><br></pre></td></tr></table></figure>

<p>上面这个，表示就默认选中了 男 这个单选按钮</p>
<h4 id="5-input-属性小结"><a href="#5-input-属性小结" class="headerlink" title="5. input 属性小结"></a>5. input 属性小结</h4><table>
<thead>
<tr>
<th>属性</th>
<th align="left">说明</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td align="left">表单类型</td>
<td>用来指定不同的控件类型</td>
</tr>
<tr>
<td>value</td>
<td align="left">表单值</td>
<td>表单里面默认显示的文本</td>
</tr>
<tr>
<td>name</td>
<td align="left">表单名字</td>
<td>页面中的表单很多，name主要作用就是用于区别不同的表单。</td>
</tr>
<tr>
<td>checked</td>
<td align="left">默认选中</td>
<td>表示那个单选或者复选按钮一开始就被选中了</td>
</tr>
</tbody></table>
<h2 id="2-2-label标签-理解"><a href="#2-2-label标签-理解" class="headerlink" title="2.2 label标签(理解)"></a>2.2 label标签(理解)</h2><p><strong>目标：</strong></p>
<p>label标签主要目的是为了提高用户体验。 为用户提高最优秀的服务。</p>
<p><strong>概念：</strong></p>
<p>label 标签为 input 元素定义标注（标签）。</p>
<p><strong>作用：</strong> </p>
<p> 用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点。</p>
<p><strong>如何绑定元素呢？</strong></p>
<ol>
<li>第一种用法就是用label直接包括input表单。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"usename"</span> <span class="attr">value</span>=<span class="string">"请输入用户名"</span>&gt;</span>   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   适合单个表单选择</p>
<ol start="2">
<li>第二种用法 for 属性规定 label 与哪个表单元素绑定。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sex"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span>  <span class="attr">id</span>=<span class="string">"sex"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>pink老师 一句话说出他们:</strong></p>
<blockquote>
<p> 当我们鼠标点击 label标签里面的文字时， 光标会定位到指定的表单里面</p>
</blockquote>
<h2 id="2-3-textarea控件-文本域"><a href="#2-3-textarea控件-文本域" class="headerlink" title="2.3 textarea控件(文本域)"></a>2.3 textarea控件(文本域)</h2><img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/textarea.png">

<ul>
<li>语法：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> &gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>作用：</p>
<p>通过textarea控件可以轻松地创建多行文本输入框.</p>
<p>cols=”每行中的字符数” rows=”显示的行数”  我们实际开发不用</p>
</li>
</ul>
<h4 id="文本框和文本域区别"><a href="#文本框和文本域区别" class="headerlink" title="文本框和文本域区别"></a>文本框和文本域区别</h4><table>
<thead>
<tr>
<th align="left">表单</th>
<th align="center">名称</th>
<th align="center">区别</th>
<th align="right">默认值显示</th>
<th align="right">用于场景</th>
</tr>
</thead>
<tbody><tr>
<td align="left">input type=”text”</td>
<td align="center">文本框</td>
<td align="center">只能显示一行文本</td>
<td align="right">单标签，通过value显示默认值</td>
<td align="right">用户名、昵称、密码等</td>
</tr>
<tr>
<td align="left">textarea</td>
<td align="center">文本域</td>
<td align="center">可以显示多行文本</td>
<td align="right">双标签，默认值写到标签中间</td>
<td align="right">留言板</td>
</tr>
</tbody></table>
<h2 id="2-4-select下拉列表"><a href="#2-4-select下拉列表" class="headerlink" title="2.4 select下拉列表"></a>2.4 select下拉列表</h2><p><strong>目的：</strong></p>
<p>如果有多个选项让用户选择，为了节约空间，我们可以使用select控件定义下拉列表.</p>
<img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/sele.png">

<p><strong>语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：</li>
</ul>
<ol>
<li>&lt;select&gt;  中至少包含一对 option </li>
<li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li>
<li>但是我们实际开发会用的比较少</li>
</ol>
<h1 id="3-form表单域"><a href="#3-form表单域" class="headerlink" title="3. form表单域"></a>3. form表单域</h1><ul>
<li><p>收集的用户信息怎么传递给服务器？</p>
<p>通过form表单域</p>
</li>
<li><p>目的：</p>
<p>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</p>
</li>
</ul>
<p>*<em>语法: *</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>常用属性：</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td align="left">url地址</td>
<td>用于指定接收并处理表单数据的服务器程序的url地址。</td>
</tr>
<tr>
<td>method</td>
<td align="left">get/post</td>
<td>用于设置表单数据的提交方式，其取值为get或post。</td>
</tr>
<tr>
<td>name</td>
<td align="left">名称</td>
<td>用于指定表单的名称，以区分同一个页面中的多个表单。</td>
</tr>
</tbody></table>
<p><strong>注意:</strong>  </p>
<p>每个表单都应该有自己表单域。我们现在做页面，不写看不到效果，但是 如果后面学 ajax 后台交互的时候，必须需要 form表单域。</p>
<h2 id="2-6-团队约定"><a href="#2-6-团队约定" class="headerlink" title="2.6 团队约定"></a>2.6 团队约定</h2><h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span>  /&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> /&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">checked</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="4-综合案例（注册页面）"><a href="#4-综合案例（注册页面）" class="headerlink" title="4.综合案例（注册页面）"></a>4.综合案例（注册页面）</h1><img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/bdd.png">

<h1 id="5-查文档"><a href="#5-查文档" class="headerlink" title="5. 查文档"></a>5. 查文档</h1><p>经常查阅文档是一个非常好的学习习惯。</p>
<p>W3C :  <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p>
<p>MDN: <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/</a></p>
<h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><img src="/2020/12/26/05-%E5%88%97%E8%A1%A8%E5%92%8C%E8%A1%A8%E5%8D%95/guifan.png">]]></content>
  </entry>
  <entry>
    <title>CSS第二天笔记</title>
    <url>/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>第01阶段.前端基础</p>
</blockquote>
<h1 id="CSS-第二天"><a href="#CSS-第二天" class="headerlink" title="CSS 第二天"></a>CSS 第二天</h1><p>今天我们围绕一个 导航栏案例进行学习知识点。<br>今日重点：</p>
<ul>
<li>复合选择器<ul>
<li>后代选择器</li>
<li>并集选择器</li>
</ul>
</li>
<li>标签显示模式</li>
<li>CSS背景<ul>
<li>背景位置</li>
</ul>
</li>
<li>CSS三大特性<ul>
<li>优先级<a id="more"></a>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/day2.png">

</li>
</ul>
</li>
</ul>
<h1 id="1-CSS复合选择器"><a href="#1-CSS复合选择器" class="headerlink" title="1. CSS复合选择器"></a>1. CSS复合选择器</h1><p> 目标</p>
<ul>
<li><p>理解</p>
<ul>
<li>理解css复合选择器分别的应用场景</li>
</ul>
</li>
<li><p>应用</p>
<ul>
<li>使用后代选择器给元素添加样式</li>
<li>使用并集选择器给元素添加样式</li>
<li>使用伪类选择器</li>
</ul>
</li>
</ul>
<p><strong>为什么要学习css复合选择器</strong></p>
<p>  CSS选择器分为 基础选择器 和 复合选择器 ，但是基础选择器不能满足我们实际开发中，快速高效的选择标签。</p>
<ul>
<li>目的是为了可以选择更准确更精细的目标元素标签。</li>
<li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li>
</ul>
<h2 id="1-1-后代选择器（重点）"><a href="#1-1-后代选择器（重点）" class="headerlink" title="1.1 后代选择器（重点）"></a>1.1 后代选择器（重点）</h2><ul>
<li><p>概念：</p>
<p>后代选择器又称为包含选择器</p>
</li>
<li><p>作用：</p>
<p>用来选择元素或元素组的<strong>子孙后代</strong></p>
</li>
<li><p>其写法就是把外层标签写在前面，内层标签写在后面，中间用<strong>空格</strong>分隔，先写父亲爷爷，在写儿子孙子。 </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父级 子级&#123;属性:属性值;属性:属性值;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.class h3&#123;color:red;font-size:16px;&#125;</span><br></pre></td></tr></table></figure>



<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/hou.png">

<ul>
<li>当标签发生嵌套时，内层标签就成为外层标签的后代。</li>
<li>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。</li>
</ul>
<h2 id="1-2-子元素选择器"><a href="#1-2-子元素选择器" class="headerlink" title="1.2 子元素选择器"></a>1.2 子元素选择器</h2><ul>
<li><p>作用：</p>
<p>子元素选择器只能选择作为某元素<strong>子元素(亲儿子)</strong>的元素。</p>
</li>
<li><p>其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 <code>&gt;</code> 进行连接</p>
</li>
<li><p>语法：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.class&gt;h3&#123;color:red;font-size:14px;&#125;</span><br></pre></td></tr></table></figure>



<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/zi1.png">

<p><strong>pink老师一句话说出他们</strong></p>
<blockquote>
<p>这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p>
</blockquote>
<p>白话：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如：  .demo &gt; h3 &#123;color: red;&#125;   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</span><br></pre></td></tr></table></figure>

<h2 id="1-3-交集选择器"><a href="#1-3-交集选择器" class="headerlink" title="1.3 交集选择器"></a>1.3 交集选择器</h2><ul>
<li><p>条件</p>
<p>交集选择器由两个选择器构成，找到的标签必须满足：既有标签一的特点，也有标签二的特点。</p>
</li>
</ul>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/jiaoji.png">

<ul>
<li>语法：</li>
</ul>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/jiao.png">

<ul>
<li>其中第一个为标签选择器，第二个为class选择器，两个选择器之间<strong>不能有空格</strong>，如h3.special。</li>
</ul>
<p><strong>记忆技巧：</strong></p>
<p>交集选择器 是 并且的意思。  即…又…的意思</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如：   p.one   选择的是： 类名为 .one  的 段落标签。</span><br></pre></td></tr></table></figure>

<p>用的相对来说比较少，不太建议使用。</p>
<h2 id="1-4-并集选择器（重点）"><a href="#1-4-并集选择器（重点）" class="headerlink" title="1.4 并集选择器（重点）"></a>1.4 并集选择器（重点）</h2><ul>
<li>应用：<ul>
<li>如果某些选择器定义的相同样式，就可以利用并集选择器，可以让代码更简洁。</li>
</ul>
</li>
<li>并集选择器（CSS选择器分组）是各个选择器通过<code>,</code>连接而成的，通常用于集体声明。</li>
<li>语法：</li>
</ul>
<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/bing.png">

<ul>
<li><p>任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。</p>
</li>
<li><p>记忆技巧：</p>
<p>并集选择器通常用于集体声明  ，逗号隔开的，所有选择器都会执行后面样式，逗号可以理解为 和的意思。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如  .one, p , #test &#123;color: #F00;&#125;  </span><br><span class="line">表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。 </span><br><span class="line">通常用于集体声明。</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/hu.gif">他和他，在一起， 在一起    一起的意思</p>
<h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 主导航栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侧导航栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sitenav"</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-l"</span>&gt;</span>左侧侧导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-r"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在不修改以上结构代码的前提下，完成以下任务：</p>
<ol>
<li>链接 登录 的颜色为红色</li>
<li>主导航栏里面的所有的链接改为橙色    </li>
<li>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。</li>
</ol>
<h2 id="1-5-链接伪类选择器（重点）"><a href="#1-5-链接伪类选择器（重点）" class="headerlink" title="1.5  链接伪类选择器（重点）"></a>1.5  链接伪类选择器（重点）</h2><p> 伪类选择器：</p>
<p> 为了和我们刚才学的类选择器相区别<br>类选择器是一个点 比如 .demo {}<br>而我们的伪类 用 2个点 就是 冒号  比如  :link{}    伪娘 </p>
<p>作用：</p>
<p>用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p>
<p>因为伪类选择器很多，比如链接伪类，结构伪类等等。我们这里先给大家讲解链接伪类选择器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>a:link      /* 未访问的链接 */</li>
<li>a:visited   /* 已访问的链接 */</li>
<li>a:hover     /* 鼠标移动到链接上 */</li>
<li>a:active    /* 选定的链接 */</li>
</ul>
<p>  <strong>注意</strong></p>
<ul>
<li>写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。否则可能引起错误。  </li>
<li>记忆法  <ul>
<li><strong>l</strong>o<strong>v</strong>e   <strong>ha</strong>te     爱上了讨厌    </li>
<li><strong>lv *<em>包包   非常 *</em>ha</strong>o   </li>
</ul>
</li>
<li>因为叫链接伪类，所以都是 利用交集选择器  a:link    a:hover  </li>
<li>因为a链接浏览器具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</li>
<li>实际工作开发中，我们很少写全四个状态，一般我们写法如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line">			<span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">			<span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">			<span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line">			<span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-6-复合选择器总结"><a href="#1-6-复合选择器总结" class="headerlink" title="1.6 复合选择器总结"></a>1.6 复合选择器总结</h2><table>
<thead>
<tr>
<th>选择器</th>
<th>作用</th>
<th>特征</th>
<th>使用情况</th>
<th>隔开符号及用法</th>
</tr>
</thead>
<tbody><tr>
<td>后代选择器</td>
<td>用来选择元素后代</td>
<td>是选择所有的子孙后代</td>
<td>较多</td>
<td>符号是<strong>空格</strong> .nav a</td>
</tr>
<tr>
<td>子代选择器</td>
<td>选择 最近一级元素</td>
<td>只选亲儿子</td>
<td>较少</td>
<td>符号是<strong>&gt;</strong>   .nav&gt;p</td>
</tr>
<tr>
<td>交集选择器</td>
<td>选择两个标签交集的部分</td>
<td>既是 又是</td>
<td>较少</td>
<td><strong>没有符号</strong>  p.one</td>
</tr>
<tr>
<td>并集选择器</td>
<td>选择某些相同样式的选择器</td>
<td>可以用于集体声明</td>
<td>较多</td>
<td>符号是<strong>逗号</strong> .nav, .header</td>
</tr>
<tr>
<td>链接伪类选择器</td>
<td>给链接更改状态</td>
<td></td>
<td>较多</td>
<td>重点记住 a{} 和 a:hover  实际开发的写法</td>
</tr>
</tbody></table>
<h1 id="2-标签显示模式（display）重点"><a href="#2-标签显示模式（display）重点" class="headerlink" title="2. 标签显示模式（display）重点"></a>2. 标签显示模式（display）重点</h1><p>目标：</p>
<ul>
<li>理解<ul>
<li>标签的三种显示模式</li>
<li>三种显示模式的特点以及区别</li>
<li>理解三种显示模式的相互转化</li>
</ul>
</li>
<li>应用<ul>
<li>实现三种显示模式的相互转化</li>
</ul>
</li>
</ul>
<h2 id="2-1-什么是标签显示模式"><a href="#2-1-什么是标签显示模式" class="headerlink" title="2.1 什么是标签显示模式"></a>2.1 什么是标签显示模式</h2><ul>
<li><p>什么是标签的显示模式？</p>
<p>标签以什么方式进行显示，比如div 自己占一行， 比如span 一行可以放很多个</p>
</li>
<li><p>作用： </p>
<p>我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p>
</li>
<li><p>标签的类型(分类)</p>
<p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。</p>
</li>
</ul>
<h2 id="2-2-块级元素-block-level"><a href="#2-2-块级元素-block-level" class="headerlink" title="2.2 块级元素(block-level)"></a>2.2 块级元素(block-level)</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/12%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0.png">

<ul>
<li>块级元素的特点</li>
</ul>
<p>（1）比较霸道，自己独占一行</p>
<p>（2）高度，宽度、外边距以及内边距都可以控制。</p>
<p>（3）宽度默认是容器（父级宽度）的100%</p>
<p>（4）是一个容器及盒子，里面可以放行内或者块级元素。</p>
<ul>
<li>注意：<ul>
<li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，特别是 p 不能放div </li>
<li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>
</ul>
</li>
</ul>
<h2 id="2-3-行内元素-inline-level"><a href="#2-3-行内元素-inline-level" class="headerlink" title="2.3 行内元素(inline-level)"></a>2.3 行内元素(inline-level)</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。有的地方也成内联元素</span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/13%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0.png">



<ul>
<li>行内元素的特点：</li>
</ul>
<p>（1）相邻行内元素在一行上，一行可以显示多个。</p>
<p>（2）高、宽直接设置是无效的。</p>
<p>（3）默认宽度就是它本身内容的宽度。</p>
<p>（4）<strong>行内元素只能容纳文本或则其他行内元素。</strong></p>
<p>  <img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/w.jpg">    注意：</p>
<ul>
<li>链接里面不能再放链接。</li>
<li>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</li>
</ul>
<h2 id="2-4-行内块元素（inline-block）"><a href="#2-4-行内块元素（inline-block）" class="headerlink" title="2.4 行内块元素（inline-block）"></a>2.4 行内块元素（inline-block）</h2><ul>
<li>例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img &#x2F;&gt;、&lt;input &#x2F;&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</span><br></pre></td></tr></table></figure>

<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/14%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0.png">

<ul>
<li><p>行内块元素的特点：</p>
<p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。</p>
<p>​</p>
</li>
</ul>
<h2 id="2-5-三种模式总结区别"><a href="#2-5-三种模式总结区别" class="headerlink" title="2.5 三种模式总结区别"></a>2.5 三种模式总结区别</h2><table>
<thead>
<tr>
<th>元素模式</th>
<th>元素排列</th>
<th>设置样式</th>
<th>默认宽度</th>
<th>包含</th>
</tr>
</thead>
<tbody><tr>
<td>块级元素</td>
<td>一行只能放一个块级元素</td>
<td>可以设置宽度高度</td>
<td>容器的100%</td>
<td>容器级可以包含任何标签</td>
</tr>
<tr>
<td>行内元素</td>
<td>一行可以放多个行内元素</td>
<td>不可以直接设置宽度高度</td>
<td>它本身内容的宽度</td>
<td>容纳文本或则其他行内元素</td>
</tr>
<tr>
<td>行内块元素</td>
<td>一行放多个行内块元素</td>
<td>可以设置宽度和高度</td>
<td>它本身内容的宽度</td>
<td></td>
</tr>
</tbody></table>
<h2 id="2-6-标签显示模式转换-display"><a href="#2-6-标签显示模式转换-display" class="headerlink" title="2.6 标签显示模式转换 display"></a>2.6 标签显示模式转换 display</h2><ul>
<li>块转行内：display:inline;</li>
<li>行内转块：display:block;</li>
<li>块、行内元素转换为行内块： display: inline-block;</li>
</ul>
<p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p>
<h1 id="3-行高那些事（line-height）"><a href="#3-行高那些事（line-height）" class="headerlink" title="3. 行高那些事（line-height）"></a>3. 行高那些事（line-height）</h1><p>目标</p>
<ul>
<li>理解<ul>
<li>能说出 行高  和 高度  三种关系</li>
<li>能简单理解为什么行高等于高度单行文字会垂直居中</li>
</ul>
</li>
<li>应用<ul>
<li>使用行高实现单行文字垂直居中</li>
<li>能会测量行高</li>
</ul>
</li>
</ul>
<h2 id="3-1-行高测量"><a href="#3-1-行高测量" class="headerlink" title="3.1 行高测量"></a>3.1 行高测量</h2><p>行高的测量方法：</p>
 <img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/line1.png">

<img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/line2.png">



<h2 id="3-2-单行文本垂直居中"><a href="#3-2-单行文本垂直居中" class="headerlink" title="3.2 单行文本垂直居中"></a>3.2 单行文本垂直居中</h2><p> 行高我们利用最多的一个地方是： 可以让单行文本在盒子中垂直居中对齐。</p>
<blockquote>
<p><strong>文字的行高等于盒子的高度。</strong></p>
</blockquote>
<p>这里情况些许复杂，开始学习，我们可以先从简单地方入手学会。</p>
<p>行高   =  上距离 +  内容高度  + 下距离 </p>
 <img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/1.png" width="700">



<p>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p>
<p><strong>行高和高度的三种关系</strong></p>
<ul>
<li>如果 行高 等 高度  文字会 垂直居中</li>
<li>如果行高 大于 高度   文字会 偏下 </li>
<li>如果行高小于高度   文字会  偏上 </li>
</ul>
<h1 id="4-CSS-背景-background"><a href="#4-CSS-背景-background" class="headerlink" title="4. CSS 背景(background)"></a>4. CSS 背景(background)</h1><p>目标</p>
<ul>
<li>理解<ul>
<li>背景的作用</li>
<li>css背景图片和插入图片的区别</li>
</ul>
</li>
<li>应用<ul>
<li>通过css背景属性，给页面元素添加背景样式</li>
<li>能设置不同的背景图片位置</li>
</ul>
</li>
</ul>
<h2 id="4-1-背景颜色-color"><a href="#4-1-背景颜色-color" class="headerlink" title="4.1 背景颜色(color)"></a>4.1 背景颜色(color)</h2><ul>
<li><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-color:颜色值;   默认的值是 transparent  透明的</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-2-背景图片-image"><a href="#4-2-背景图片-image" class="headerlink" title="4.2 背景图片(image)"></a>4.2 背景图片(image)</h2><ul>
<li>语法： </li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-image : none | url (url)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td align="center">无背景图（默认的）</td>
</tr>
<tr>
<td>url</td>
<td align="center">使用绝对或相对地址指定背景图像</td>
</tr>
</tbody></table>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-image : url(images/demo.png);</span><br></pre></td></tr></table></figure>

<ul>
<li>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</li>
</ul>
<h2 id="4-3-背景平铺（repeat）"><a href="#4-3-背景平铺（repeat）" class="headerlink" title="4.3 背景平铺（repeat）"></a>4.3 背景平铺（repeat）</h2><ul>
<li>语法： </li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-repeat : repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>repeat</td>
<td align="center">背景图像在纵向和横向上平铺（默认的）</td>
</tr>
<tr>
<td>no-repeat</td>
<td align="center">背景图像不平铺</td>
</tr>
<tr>
<td>repeat-x</td>
<td align="center">背景图像在横向上平铺</td>
</tr>
<tr>
<td>repeat-y</td>
<td align="center">背景图像在纵向平铺</td>
</tr>
</tbody></table>
<h2 id="4-4-背景位置-position-重点"><a href="#4-4-背景位置-position-重点" class="headerlink" title="4.4 背景位置(position) 重点"></a>4.4 背景位置(position) 重点</h2><ul>
<li>语法： </li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-position : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td align="center">百分数 | 由浮点数字和单位标识符组成的长度值</td>
</tr>
<tr>
<td>position</td>
<td align="center">top | center | bottom | left | center | right   方位名词</td>
</tr>
</tbody></table>
<ul>
<li>注意：<ul>
<li>必须先指定background-image属性</li>
<li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li>
<li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li>
<li>如果只指定了一个方位名词，另一个值默认居中对齐。</li>
<li>如果position 后面是精确坐标， 那么第一个，肯定是 x  第二的一定是y</li>
<li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li>
<li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li>
</ul>
</li>
</ul>
<p><strong>实际工作用的最多的，就是背景图片居中对齐了。</strong></p>
<p>练习1：</p>
<p>背景大图</p>
<p>练习2：</p>
<p>小图片在盒子左侧垂直居中</p>
<h2 id="4-5-背景附着"><a href="#4-5-背景附着" class="headerlink" title="4.5 背景附着"></a>4.5 背景附着</h2><ul>
<li><p>背景附着就是解释背景是滚动的还是固定的</p>
</li>
<li><p>语法： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure>

</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>scroll</td>
<td align="center">背景图像是随对象内容滚动</td>
</tr>
<tr>
<td>fixed</td>
<td align="center">背景图像固定</td>
</tr>
</tbody></table>
<h2 id="4-6-背景简写"><a href="#4-6-背景简写" class="headerlink" title="4.6 背景简写"></a>4.6 背景简写</h2><ul>
<li>background：属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</li>
<li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">image</span><span class="selector-class">.jpg</span>) <span class="selector-tag">repeat-y</span>  <span class="selector-tag">scroll</span> <span class="selector-tag">center</span> <span class="selector-tag">top</span> ;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>导航栏案例</p>
<h2 id="4-7-背景透明-CSS3"><a href="#4-7-背景透明-CSS3" class="headerlink" title="4.7 背景透明(CSS3)"></a>4.7 背景透明(CSS3)</h2><ul>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.3</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>最后一个参数是alpha 透明度  取值范围 0~1之间</li>
<li>我们习惯把0.3 的 0 省略掉  这样写  background: rgba(0, 0, 0, .3);</li>
<li>注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不受影响</li>
<li>因为是CSS3 ，所以 低于 ie9 的版本是不支持的。</li>
</ul>
<h2 id="4-8-背景总结"><a href="#4-8-背景总结" class="headerlink" title="4.8 背景总结"></a>4.8 背景总结</h2><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td>background-color</td>
<td align="left">背景颜色</td>
<td align="left">预定义的颜色值/十六进制/RGB代码</td>
</tr>
<tr>
<td>background-image</td>
<td align="left">背景图片</td>
<td align="left">url(图片路径)</td>
</tr>
<tr>
<td>background-repeat</td>
<td align="left">是否平铺</td>
<td align="left">repeat/no-repeat/repeat-x/repeat-y</td>
</tr>
<tr>
<td>background-position</td>
<td align="left">背景位置</td>
<td align="left">length/position    分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td>
</tr>
<tr>
<td>background-attachment</td>
<td align="left">背景固定还是滚动</td>
<td align="left">scroll/fixed</td>
</tr>
<tr>
<td>背景简写</td>
<td align="left">更简单</td>
<td align="left">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td>
</tr>
<tr>
<td>背景透明</td>
<td align="left">让盒子半透明</td>
<td align="left">background: rgba(0,0,0,0.3);   后面必须是 4个值</td>
</tr>
</tbody></table>
<h1 id="5-CSS-三大特性"><a href="#5-CSS-三大特性" class="headerlink" title="5. CSS 三大特性"></a>5. CSS 三大特性</h1><p>目标：</p>
<ul>
<li>理解<ul>
<li>能说出css样式冲突采取的原则</li>
<li>能说出那些常见的样式会有继承</li>
</ul>
</li>
<li>应用<ul>
<li>能写出CSS优先级的算法</li>
<li>能会计算常见选择器的叠加值</li>
</ul>
</li>
</ul>
<h2 id="5-1-CSS层叠性"><a href="#5-1-CSS层叠性" class="headerlink" title="5.1 CSS层叠性"></a>5.1 CSS层叠性</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/20%E5%B1%82%E5%8F%A0%E6%80%A7.png">

<ul>
<li><p>概念：</p>
<p>所谓层叠性是指多种CSS样式的叠加。</p>
<p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p>
</li>
<li><p>原则：</p>
<ul>
<li>样式冲突，遵循的原则是<strong>就近原则。</strong> 那个样式离着结构近，就执行那个样式。</li>
<li>样式不冲突，不会层叠</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSS层叠性最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</span><br></pre></td></tr></table></figure>

 <img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/hai.gif" width="600" height="400">

<h2 id="5-2-CSS继承性"><a href="#5-2-CSS继承性" class="headerlink" title="5.2 CSS继承性"></a>5.2 CSS继承性</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/21%E7%BB%A7%E6%89%BF%E6%80%A7.png">

<ul>
<li><p>概念：</p>
<p>子标签会继承父标签的某些样式，如文本颜色和字号。</p>
<p> 想要设置一个可继承的属性，只需将它应用于父元素即可。</p>
</li>
</ul>
<p>简单的理解就是：  子承父业。</p>
<ul>
<li><strong>注意</strong>：<ul>
<li>恰当地使用继承可以简化代码，降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。</li>
<li>子元素可以继承父元素的样式（<strong>text-，font-，line-这些元素开头的可以继承，以及color属性</strong>）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSS继承性口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</span><br></pre></td></tr></table></figure>

 <img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/shu.gif">

<h2 id="5-3-CSS优先级（重点）"><a href="#5-3-CSS优先级（重点）" class="headerlink" title="5.3 CSS优先级（重点）"></a>5.3 CSS优先级（重点）</h2><img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/22%E4%BC%98%E5%85%88%E7%BA%A7.png">

<ul>
<li><p>概念：</p>
<p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时，</p>
<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，就会出现优先级的问题。</li>
</ul>
</li>
</ul>
<h4 id="1-权重计算公式"><a href="#1-权重计算公式" class="headerlink" title="1). 权重计算公式"></a>1). 权重计算公式</h4><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</p>
<table>
<thead>
<tr>
<th>标签选择器</th>
<th>计算权重公式</th>
</tr>
</thead>
<tbody><tr>
<td>继承或者 *</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>每个元素（标签选择器）</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>每个类，伪类</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>每个ID</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>每个行内样式 style=””</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>每个!important  重要的</td>
<td>∞ 无穷大</td>
</tr>
</tbody></table>
<ul>
<li>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </li>
<li>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity（特殊性）</li>
<li>div {<pre><code>color: pink!important;  </code></pre>}</li>
</ul>
<h4 id="2-权重叠加"><a href="#2-权重叠加" class="headerlink" title="2). 权重叠加"></a>2). 权重叠加</h4><p>我们经常用交集选择器，后代选择器等，是有多个基础选择器组合而成，那么此时，就会出现权重叠加。</p>
<p>就是一个简单的加法计算</p>
<ul>
<li><p>div ul  li   ——&gt;      0,0,0,3</p>
</li>
<li><p>.nav ul li   ——&gt;      0,0,1,2</p>
</li>
<li><p>a:hover      —–—&gt;   0,0,1,1</p>
</li>
<li><p>.nav a       ——&gt;      0,0,1,1</p>
<p><img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/w.jpg"> 注意： </p>
</li>
</ul>
<ol>
<li>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</li>
</ol>
<h4 id="3-继承的权重是0"><a href="#3-继承的权重是0" class="headerlink" title="3). 继承的权重是0"></a>3). 继承的权重是0</h4><p>这个不难，但是忽略很容易绕晕。其实，我们修改样式，一定要看该标签有没有被选中。</p>
<p>1） 如果选中了，那么以上面的公式来计权重。谁大听谁的。<br>2） 如果没有选中，那么权重是0，因为继承的权重为0.</p>
<h1 id="6-CSS注释"><a href="#6-CSS注释" class="headerlink" title="6. CSS注释"></a>6. CSS注释</h1><p><strong>CSS注释规则：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*  需要注释的内容  *&#x2F;  进行注释的，即在需要注释的内容前使用 &quot;&#x2F;*&quot; 标记开始注释，在内容的结尾使用 &quot;*&#x2F;&quot;结束。</span><br></pre></td></tr></table></figure>

<p>   例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="comment">/* 所有的字体是14像素大小*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-今日总结"><a href="#7-今日总结" class="headerlink" title="7. 今日总结"></a>7. 今日总结</h1><img src="/2020/12/26/CSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%E7%AC%94%E8%AE%B0/day2.png">

]]></content>
  </entry>
  <entry>
    <title>DenyHosts使用</title>
    <url>/2020/03/17/DenyHosts%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="DenyHosts简介"><a href="#DenyHosts简介" class="headerlink" title="DenyHosts简介"></a>DenyHosts简介</h2><pre><code>DenyHOsts是一种运行在linux上防止SSH暴力破解的软件,当别人尝试破解你的密码而进行对次重复攻击时,它会将该ip记录到/etc/hosts.deny,从而达到自动屏蔽IP,并且可以自己设定失败多少次后将禁止登录,它分析sshd的日志文件是/var/log/secure,它也是由python编写的程序软件。</code></pre><a id="more"></a>

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote>
<p>下载后上传到linux上, <a href="https://sourceforge.net/projects/denyhosts/files/" target="_blank" rel="noopener">请点击此处下载</a></p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><code>tar -zxvf DenyHosts-2.6.tar.gz</code> 解压 </li>
<li><code>cd DenyHosts-2.6.tar.gz</code> 进到目录里安装</li>
<li><code>python setup.py install</code> 安装</li>
<li><code>cd /usr/share/denyhosts/</code> 默认安装在这里</li>
<li><code>cp denyhosts.cfg-dist denyhosts.cfg</code> 配置文件 </li>
<li><code>cp daemon-control-dist daemon-control</code> 这个是启动程序</li>
<li><code>chown root daemon-control</code> 把所有者改为root</li>
<li><code>chmod 700 daemon-control</code> 修改权限</li>
<li><code>ln -s /usr/share/denyhosts/daemon-control /etc/init.d</code> 建立软连接</li>
<li><code>/etc/init.d/daemon-control start</code> 启动denyhosts程序</li>
<li><code>chkconfig daemon-control on</code> 设为开机自启</li>
</ol>
<h3 id="编辑DenyHosts配置文件"><a href="#编辑DenyHosts配置文件" class="headerlink" title="编辑DenyHosts配置文件"></a>编辑DenyHosts配置文件</h3><p><code>vim /usr/share/denyhosts/denyhosts.cfg</code></p>
<ul>
<li>HOSTS_DENY = /etc/hosts.deny  这个控制用户登录的文件</li>
<li>PURGE_DENY = 30m 意思是过多后才清除已经禁止的,这里是30分钟</li>
<li>DENY_THRESHOLD_INVALID = 1 允许无效用户失败次数</li>
<li>DENY_THRESHOLD_VALID = 3 允许普通用户登录失败的次数</li>
<li>DENY_THRESHOLD_ROOT = 3 允许root登录失败的次数</li>
<li>SECURE_LOG = /var/log/secure 前面所说的日志文件</li>
<li>DAEMON_LOG = /var/log/denyhosts 默认日志文件存放的路径</li>
</ul>
<h3 id="编辑配置文件之后-重启服务就好了"><a href="#编辑配置文件之后-重启服务就好了" class="headerlink" title="编辑配置文件之后,重启服务就好了"></a>编辑配置文件之后,重启服务就好了</h3><pre><code>/etc/init.d/daemon-control restart 重启
/etc/init.d/daemon-control status  查看状态</code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>安全防范</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装</title>
    <url>/2020/04/26/Docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="Docker虚拟化技术的概念"><a href="#Docker虚拟化技术的概念" class="headerlink" title="Docker虚拟化技术的概念"></a>Docker虚拟化技术的概念</h3><pre><code>1. Docker是一款轻量级、高性能的虚拟化技术，是目前互联网使用最多的虚拟化技术，Docker虚拟化技术的本质类似集装箱机制，最早集装箱没有出现的时候，码头上有许多搬运的工人在搬运货物，集装箱出现以后，码头上看到更多的不是工人，而且集装箱的搬运模式更加单一，更加高效，还有其他的好处。
2. 将货物多打包在集装箱里面，可以防止货物之间相互影响。并且到了另外一个码头需要转运的话，有了在集装箱以后，直接把它运送到另一个码头即可，完全可以保证里面的货物是整体的搬迁，并且不会损坏货物本身。
3. Docker技术机制跟集装箱类似，Docker虚拟化 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。
4. Docker容器是完全使用沙箱机制，相互之间不会有任何接口，几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包括系统。</code></pre><a id="more"></a>

<h3 id="传统虚拟化结构与Docker虚拟化结构对比"><a href="#传统虚拟化结构与Docker虚拟化结构对比" class="headerlink" title="传统虚拟化结构与Docker虚拟化结构对比"></a>传统虚拟化结构与Docker虚拟化结构对比</h3><ol>
<li>传统虚拟化结构:<blockquote>
<img src="/2020/04/26/Docker%E5%AE%89%E8%A3%85/1.png" class title="传统虚拟化结构图示">
<blockquote>
<p>KVM、XEN、ESXI传统虚拟化（完全、半虚拟化）是在硬件的基础上，基于现有的操作系统层面上实现虚拟化，但是不能复用本地主机的操作系统，而是必须虚拟出自己的Guest OS系统，然后在Guest OS系统上部署相关的APP应用（Apache、MYSQL、PHP、JAVA）</p>
</blockquote>
</blockquote>
</li>
<li>Docker虚拟化结构:<blockquote>
<img src="/2020/04/26/Docker%E5%AE%89%E8%A3%85/2.png" class title="Docker虚拟化结构图示">
<blockquote>
<p>Docker虚拟化技术是在硬件的基础上，基于现有的操作系统层面上实现虚拟化，直接复用本地主机的操作系统，直接虚拟生成Docker容器，而在Docker容器上部署相关的APP应用（Apache、MYSQL、PHP、JAVA）</p>
</blockquote>
</blockquote>
</li>
</ol>
<h3 id="Centos6安装Docker平台"><a href="#Centos6安装Docker平台" class="headerlink" title="Centos6安装Docker平台"></a>Centos6安装Docker平台</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.安装epel扩展源</span><br><span class="line">yum install epel-release -y</span><br><span class="line"></span><br><span class="line">2.安装Docker-io版本</span><br><span class="line">yum install docker-io lxc cgroup device-mapper* -y</span><br><span class="line"></span><br><span class="line">3.检查Docker版本是否安装</span><br><span class="line">rpm -qa|grep -E &quot;docker|lxc|device-mapper&quot;</span><br><span class="line"></span><br><span class="line">4.启动Docker引擎服务</span><br><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line">5.查看Docker服务进程</span><br><span class="line">ps -ef|grep docker</span><br><span class="line"></span><br><span class="line">6.查看docker info信息</span><br><span class="line">docker info|more</span><br><span class="line"></span><br><span class="line">7.尝试从Docker仓库下载nginx镜像</span><br><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>
<h3 id="Centos7安装Docker平台"><a href="#Centos7安装Docker平台" class="headerlink" title="Centos7安装Docker平台"></a>Centos7安装Docker平台</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.安装阿里源</span><br><span class="line">wget -P &#x2F;etc&#x2F;yum.repos.d&#x2F; http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"></span><br><span class="line">2.安装Docker-ce版本</span><br><span class="line">yum install docker-ce* -y</span><br><span class="line"></span><br><span class="line">3.检查Docker版本是否安装</span><br><span class="line">rpm -qa|grep -E &quot;docker&quot;</span><br><span class="line"></span><br><span class="line">4.启动Docker引擎服务</span><br><span class="line">systemctl restart docker.service</span><br><span class="line"></span><br><span class="line">5.查看Docker服务进程</span><br><span class="line">ps -ef|grep docker</span><br><span class="line"></span><br><span class="line">6.查看docker info信息</span><br><span class="line">docker info|more</span><br><span class="line"></span><br><span class="line">7.在Docker仓库下载nginx镜像</span><br><span class="line">docker search nginx</span><br><span class="line">docke pull nginx或者另一个docker pull docker.io&#x2F;nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker切换镜像源</p>
<blockquote>
<p>cat&gt;/etc/docker/daemon.json&lt;&lt;EOF<br>{<br>“registry-mirrors”:[“<a href="https://registry.docker-cn.com&quot;]">https://registry.docker-cn.com&quot;]</a><br>}<br>EOF</p>
</blockquote>
</blockquote>
<h3 id="docker的简单使用"><a href="#docker的简单使用" class="headerlink" title="docker的简单使用"></a>docker的简单使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.查看是否安装了nginx镜像</span><br><span class="line">docker images | grep -i nginx </span><br><span class="line"></span><br><span class="line">2.docker run -itd -p 80:80 nginx:latest</span><br><span class="line">参数:</span><br><span class="line">    run 全新创建一台容器</span><br><span class="line">    -i  interactive交互模式</span><br><span class="line">    -t  tty打开终端</span><br><span class="line">    -d  detach后台运行</span><br><span class="line">    -p  publist发布端口,将宿主机80(第一个)映射到容器80</span><br><span class="line"></span><br><span class="line">3.查看已启动nginx容器状态和IP地址(虚拟机)</span><br><span class="line">以下:</span><br><span class="line">    进程查看: docker ps</span><br><span class="line">    IP地址: docker inspect 8a6cc34d7ff6|grep -i ipaddr|tail -1</span><br><span class="line">    或者docker inspect 8a6cc34d7ff6|grep -i ipaddr|tail -1|awk -F\&quot; &#39;&#123;print $4&#125;&#39;</span><br><span class="line"></span><br><span class="line">4.停止nginx容器:</span><br><span class="line">docker stop 8a6cc34d7ff6</span><br></pre></td></tr></table></figure>
<blockquote>
<p><img src="/2020/04/26/Docker%E5%AE%89%E8%A3%85/id.png" class title="docker ps图示}&lt;&#x2F;p&gt; &lt;&#x2F;blockquote&gt;"></p></blockquote>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker案例CentOS+LAMP+Discuz门户实战</title>
    <url>/2020/05/25/Docker%E6%A1%88%E4%BE%8BCentOS-LAMP-Discuz%E9%97%A8%E6%88%B7%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><pre><code>基于Docker虚拟化平台，构建一台CentOS云主机，云主机服务器默认开启80、22端口，用户通过远程工具CRT、XSHELL能够远程登录CentOS云主机</code></pre><a id="more"></a>

<h3 id="操作的方法和步骤如下"><a href="#操作的方法和步骤如下" class="headerlink" title="操作的方法和步骤如下:"></a>操作的方法和步骤如下:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在Docker官方仓库中搜索CentOS镜像:</span><br><span class="line">docker search centos</span><br><span class="line"></span><br><span class="line">2.从Docker官方仓库下载CentOS镜像:</span><br><span class="line">docker pull ansible&#x2F;centos7-ansible</span><br><span class="line"></span><br><span class="line">3.查看已下载CentOS镜像文件和列表:</span><br><span class="line">ls -l &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;</span><br><span class="line">docker images</span><br><span class="line">docker images|grep -i centos</span><br></pre></td></tr></table></figure>
<img src="/2020/05/25/Docker%E6%A1%88%E4%BE%8BCentOS-LAMP-Discuz%E9%97%A8%E6%88%B7%E5%AE%9E%E6%88%98/see.jpg" class title="赞">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.基于CentOS镜像启动CentOS云主机服务器</span><br><span class="line">docker run -itd --name&#x3D;irene-vm001 --privileged -p 80:80 -p 6022:22 ansible&#x2F;centos7-ansible</span><br><span class="line"></span><br><span class="line">5.查看已启动CentOS云主机的状态和IP地址</span><br><span class="line">docker ps</span><br><span class="line">docker inspect irene-vm001 | grep -i ipaddr|tail -1</span><br></pre></td></tr></table></figure>
<img src="/2020/05/25/Docker%E6%A1%88%E4%BE%8BCentOS-LAMP-Discuz%E9%97%A8%E6%88%B7%E5%AE%9E%E6%88%98/irenevm.jpg" class title="赞">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6.登录后打开6022端口</span><br><span class="line">dcker exec -it irene-vm001 &#x2F;bin&#x2F;bash</span><br><span class="line">yum install net-tools -y</span><br><span class="line">yum install openssh-server -y</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">7.进到宿主机把ssh下的文件复制过来</span><br><span class="line">cd &#x2F;etc&#x2F;ssh</span><br><span class="line">tar czvf ssh.tar *</span><br><span class="line">docker cp ssh.tar 7d9655b03816:&#x2F;etc&#x2F;ssh</span><br><span class="line">docker exec -it irene-vm001 &#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;etc&#x2F;ssh</span><br><span class="line">tar -xf ssh.tar</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;sshd</span><br><span class="line"></span><br><span class="line">8.在云主机修改密码,用远程工具连接</span><br><span class="line">docker exec -it irene-vm001 &#x2F;bin&#x2F;bash</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure>
<img src="/2020/05/25/Docker%E6%A1%88%E4%BE%8BCentOS-LAMP-Discuz%E9%97%A8%E6%88%B7%E5%AE%9E%E6%88%98/sshd.jpg" class title="赞">
<blockquote>
<img src="/2020/05/25/Docker%E6%A1%88%E4%BE%8BCentOS-LAMP-Discuz%E9%97%A8%E6%88%B7%E5%AE%9E%E6%88%98/login.jpg" class title="赞">
<blockquote>
<img src="/2020/05/25/Docker%E6%A1%88%E4%BE%8BCentOS-LAMP-Discuz%E9%97%A8%E6%88%B7%E5%AE%9E%E6%88%98/logins.jpg" class title="赞"></blockquote>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker案例nginx+tomcat负载均衡集群</title>
    <url>/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>基于Docker虚拟化平台，构建一套Nginx、Tomcat WEB容器，要求Nginx容器默认启动80端口服务，而且Tomcat WEB容器启动8080服务，最终实现Nginx负载均衡Tomcat容器集群&amp;动静分离、Rewrite规则。</p>
<a id="more"></a>
<h3 id="操作如下"><a href="#操作如下" class="headerlink" title="操作如下:"></a>操作如下:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在Docker官方仓库中搜索tomcat镜像</span><br><span class="line">docker search tomcat</span><br><span class="line"></span><br><span class="line">2.从Docker官方仓库下载tomcat镜像</span><br><span class="line">docker pull ashince&#x2F;tomcat8</span><br><span class="line"></span><br><span class="line">3.查看已下载tomcat镜像文件和列表</span><br><span class="line">ls -l &#x2F;var&#x2F;lib&#x2F;docker&#x2F;image&#x2F;</span><br><span class="line">docker images</span><br><span class="line">docker images|grep -i tomcat</span><br></pre></td></tr></table></figure>
<img src="/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/look.jpg" class title="赞">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.基于Tomcat镜像启动Tomcat WEB容器服务</span><br><span class="line">docker run -itd -p 8080:8080 ashince&#x2F;tomcat8:latest</span><br><span class="line">docker run -itd -p 8081:8080 ashince&#x2F;tomcat8:latest</span><br><span class="line"></span><br><span class="line">命令参数含义:</span><br><span class="line">run : 全新创建一台容器服务 </span><br><span class="line">-i : interactive交互模式 </span><br><span class="line">-t : tty打开登陆终端 </span><br><span class="line">-d : detach后台启动 </span><br><span class="line">-p : publish发布端口，将宿主机8080、8081映射至容器8080</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.查看已启动Tomcat WEB容器的状态和IP地址</span><br><span class="line">docker ps</span><br><span class="line">docker inspect 0bf1f9f8daf9|grep -i ipaddr|tail -1</span><br><span class="line">docker inspect 0bf1f9f8daf9|grep -i ipaddr|tail -1|grep -oE &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span><br></pre></td></tr></table></figure>
<img src="/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/ps.jpg" class title="赞"> 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6.进入主机</span><br><span class="line">docker exec -it 0bf1f9f8daf9 &#x2F;bin&#x2F;bash</span><br><span class="line">7.通过浏览器访问宿主机IP+8080、8081端口，如图所示:</span><br></pre></td></tr></table></figure>
<blockquote>
<img src="/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/cats.jpg" class title="赞">
<blockquote>
<img src="/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/catss.jpg" class title="赞">
</blockquote>
</blockquote>
<p>8.修改Nginx容器主配置文件，同时加入负载均衡模块和如下代码</p>
<img src="/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/nginx.jpg" class title="nginx启动及查看">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1)从Nginx容器中将主配置拷贝至宿主机进行修改,在&lt;&lt;Docker安装&gt;&gt;中已经安装了nginx </span><br><span class="line">    docker cp fc61fc2e4e6b:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf .  (复制到当前目录)</span><br><span class="line">    </span><br><span class="line">    2)默认default.conf文件修改完毕的代码如下:</span><br><span class="line">upstream tomcat_web &#123;</span><br><span class="line">        server 172.17.0.2:8080 weight&#x3D;100 max_fails&#x3D;2 fail_timeout&#x3D;15;</span><br><span class="line">        server 172.17.0.3:8080 weight&#x3D;100 max_fails&#x3D;2 fail_timeout&#x3D;15;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;tomcat_web;</span><br><span class="line">        proxy_set_header host $host;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    3)将default.conf配置文件拷贝至Nginx容器中对应目录</span><br><span class="line">    docker cp default.conf fc61fc2e4e6b:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</span><br><span class="line"></span><br><span class="line">    4)重启Nginx容器中nginx服务</span><br><span class="line">    docker exec fc61fc2e4e6b nginx -t</span><br><span class="line">    docker exec fc61fc2e4e6b nginx -s reload</span><br><span class="line"></span><br><span class="line">    5)通过浏览器访问Nginx WEB IP地址,如图所示:</span><br></pre></td></tr></table></figure>
<img src="/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/scat.jpg" class title="nginx启动及查看">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9.Nginx+Tomcat实现动静分离,配置代码如下：</span><br><span class="line"></span><br><span class="line">    1)同样修改配置文件default.conf,再复制回去</span><br><span class="line">upstream tomcat_web &#123;</span><br><span class="line">        server 172.17.0.2:8080 weight&#x3D;100 max_fails&#x3D;2 fail_timeout&#x3D;15;</span><br><span class="line">        server 172.17.0.3:8080 weight&#x3D;100 max_fails&#x3D;2 fail_timeout&#x3D;15;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;tomcat_web;</span><br><span class="line">        proxy_set_header host $host;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(htm|html|css|js|txt|jpg|png|gif|jpeg|doc)$</span><br><span class="line">    &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      2)把tomcat下的png和css复制到nginx</span><br><span class="line">    docker cp 0bf1f9f8daf9:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;tomcat.png .</span><br><span class="line">    docker cp 0bf1f9f8daf9:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;tomcat.css .</span><br><span class="line">    docker cp tomcat.png fc61fc2e4e6b:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line">    docker cp tomcat.css fc61fc2e4e6b:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line"></span><br><span class="line">    3)到tomcat打包ROOT下面的文件</span><br><span class="line">    docker exec -it  0bf1f9f8daf9 &#x2F;bin&#x2F;bash</span><br><span class="line">    cd &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;</span><br><span class="line">    tar czf ROOT.tar *</span><br><span class="line"></span><br><span class="line">    4)到主机外复制出来,再把ROOT.tar复制nginx</span><br><span class="line">    docker cp 0bf1f9f8daf9:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;ROOT.tar .</span><br><span class="line">    docker cp ROOT.tar fc61fc2e4e6b:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line"></span><br><span class="line">    5)到nginx里解压缩ROOT.tar</span><br><span class="line">    docker exec -it fc61fc2e4e6b &#x2F;bin&#x2F;bash</span><br><span class="line">    cd &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line">    tar -xf ROOT.tar</span><br><span class="line"></span><br><span class="line">    6)实现访问 &#x2F; 转到index.jsp,同样修改default.conf</span><br><span class="line">upstream tomcat_web &#123;</span><br><span class="line">        server 172.17.0.2:8080 weight&#x3D;100 max_fails&#x3D;2 fail_timeout&#x3D;15;</span><br><span class="line">        server 172.17.0.3:8080 weight&#x3D;100 max_fails&#x3D;2 fail_timeout&#x3D;15;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    rewrite ^&#x2F;$  &#x2F;index.jsp permanent;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;tomcat_web;</span><br><span class="line">        proxy_set_header host $host;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(htm|html|css|js|txt|jpg|png|gif|jpeg|doc)$</span><br><span class="line">    &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    7)复制回nginx容器并且重启</span><br><span class="line">    docker cp default.conf fc61fc2e4e6b:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</span><br><span class="line">    docker exec fc61fc2e4e6b nginx -s reload</span><br></pre></td></tr></table></figure>
<img src="/2020/05/23/Docker%E6%A1%88%E4%BE%8Bnginx-tomcat%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%9B%86%E7%BE%A4/rew.jpg" class title="赞">

<p>10.删除所有容器</p>
<blockquote>
<p>docker ps -aq|xargs docker rm -f</p>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker容器</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP搭建zabbix监控平台</title>
    <url>/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p><strong>部署LNMP(Linux+Nginx+Mariadb+PHP)环境</strong></p>
<a id="more"></a>
<p>关闭selinux和防火墙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>
<p>安装epel-release扩展源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y </span><br><span class="line">ll &#x2F;etc&#x2F;yum.repos.d&#x2F;|grep -aw epel</span><br></pre></td></tr></table></figure>
<h3 id="源码编译nginx"><a href="#源码编译nginx" class="headerlink" title="源码编译nginx"></a>源码编译nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装依赖包</span><br><span class="line">yum -y install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre* </span><br><span class="line"></span><br><span class="line"># 创建nginx运行用户 </span><br><span class="line">useradd -M -s &#x2F;sbin&#x2F;nologin nginx</span><br><span class="line"></span><br><span class="line"># 下载pcre包并解压 </span><br><span class="line">wget https:&#x2F;&#x2F;jaist.dl.sourceforge.net&#x2F;project&#x2F;pcre&#x2F;pcre&#x2F;8.42&#x2F;pcre-8.42.zip </span><br><span class="line">unzip pcre-8.42.zip -d &#x2F;usr&#x2F;local&#x2F;src&#x2F; </span><br><span class="line"></span><br><span class="line"># 下载nginx源码包并解压 </span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.14.0.tar.gz </span><br><span class="line">tar zxf nginx-1.14.0.tar.gz -C &#x2F;usr&#x2F;local&#x2F;src </span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;nginx-1.14.0&#x2F; </span><br><span class="line"></span><br><span class="line"># 预编译 </span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \ --with-http_dav_module \ --with-http_stub_status_module \ --with-http_addition_module \ --with-http_sub_module \ --with-http_flv_module \ --with-http_mp4_module \ --with-http_ssl_module \ --user&#x3D;nginx \ --group&#x3D;nginx \ --with-pcre&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;pcre-8.42 </span><br><span class="line"></span><br><span class="line"># 编译并安装 </span><br><span class="line">make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line"># 安装好的启动路径 </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx </span><br><span class="line"></span><br><span class="line"># 添加环境变量 </span><br><span class="line">vim &#x2F;etc&#x2F;profile export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin </span><br><span class="line"></span><br><span class="line"># 执行并立即生效 </span><br><span class="line">source &#x2F;etc&#x2F;profile nginx </span><br><span class="line"></span><br><span class="line"># 配置启动脚本 </span><br><span class="line">vim &#x2F;etc&#x2F;init.d&#x2F;nginx #!&#x2F;bin&#x2F;bash </span><br><span class="line">#chkconfig: 2345 99 20 </span><br><span class="line">#description: nginx-server </span><br><span class="line">nginx&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx </span><br><span class="line">case $1 in </span><br><span class="line">    start) </span><br><span class="line">        netstat -anptu | grep nginx </span><br><span class="line">        if [ $? -eq 0 ] </span><br><span class="line">        then </span><br><span class="line">            echo &quot;nginx service is already running&quot; </span><br><span class="line">        else </span><br><span class="line">            echo &quot;nginx Service started successfully&quot;</span><br><span class="line">            $nginx </span><br><span class="line">        fi </span><br><span class="line">    ;; </span><br><span class="line">    stop)</span><br><span class="line">        $nginx -s stop </span><br><span class="line">        if [ $? -eq 0 ] </span><br><span class="line">            then echo &quot;nginx service closed successfully&quot;</span><br><span class="line">        else </span><br><span class="line">            echo &quot;nginx server stop fail,try again&quot; </span><br><span class="line">        fi </span><br><span class="line">    ;; </span><br><span class="line">    status) </span><br><span class="line">        netstat -anlpt | grep nginx </span><br><span class="line">        if [ $? -eq 0 ] </span><br><span class="line">        then </span><br><span class="line">            echo &quot;nginx server is running&quot; </span><br><span class="line">        else </span><br><span class="line">            echo &quot;nginx service not started&quot; </span><br><span class="line">        fi </span><br><span class="line">    ;;</span><br><span class="line">    restart)</span><br><span class="line">        $nginx -s reload</span><br><span class="line">        if [ $? -eq 0 ]</span><br><span class="line">        then</span><br><span class="line">            echo &quot;nginx service restart successfully&quot;</span><br><span class="line">        else </span><br><span class="line">            echo &quot;nginx server restart failed&quot; </span><br><span class="line">        fi</span><br><span class="line">    ;; </span><br><span class="line">    *) echo &quot;please enter &#123;start restart status stop&#125;&quot; </span><br><span class="line">    ;; </span><br><span class="line">esac </span><br><span class="line"></span><br><span class="line"># 加上执行权限 </span><br><span class="line">chmod +x &#x2F;etc&#x2F;init.d&#x2F;nginx </span><br><span class="line"></span><br><span class="line"># 添加开机启动项 </span><br><span class="line">chkconfig --add nginx chkconfig nginx on </span><br><span class="line"></span><br><span class="line"># 配置nginx以守护进程方式启动 </span><br><span class="line">vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service </span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;The Nginx HTTP Server</span><br><span class="line">After&#x3D;network.target remote-fs.target nss-lookup.target </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking </span><br><span class="line">EnvironmentFile&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf </span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx </span><br><span class="line">ExecReload&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload </span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop </span><br><span class="line">KillSignal&#x3D;SIGCONT </span><br><span class="line">PrivateTmp&#x3D;true </span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy&#x3D;multi-user.target </span><br><span class="line"></span><br><span class="line"># 重新加载服务的配置文件 </span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 重启nginx服务 </span><br><span class="line">nginx -s stop systemctl restart nginx.service</span><br></pre></td></tr></table></figure>

<h3 id="yum安装Mariadb（数据库）、PHP、PHP-FPM环境"><a href="#yum安装Mariadb（数据库）、PHP、PHP-FPM环境" class="headerlink" title="yum安装Mariadb（数据库）、PHP、PHP-FPM环境"></a>yum安装Mariadb（数据库）、PHP、PHP-FPM环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server mariadb-devel php php-cli php-common php-gd php-ldap php-mbstring php-mcrypt php-mysql php-pdo php-fpm -y</span><br><span class="line"></span><br><span class="line"># 启动mariadb数据库和php-fpm </span><br><span class="line">systemctl start mariadb </span><br><span class="line">systemctl start php-fpm </span><br><span class="line">systemctl enable mariadb </span><br><span class="line">systemctl enable php-fpm</span><br></pre></td></tr></table></figure>
<h3 id="从官方下载zabbix-解压安装"><a href="#从官方下载zabbix-解压安装" class="headerlink" title="从官方下载zabbix,解压安装"></a>从官方下载zabbix,解压安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c  https:&#x2F;&#x2F;cdn.zabbix.com&#x2F;zabbix&#x2F;sources&#x2F;stable&#x2F;4.0&#x2F;zabbix-4.0.19.tar.gz</span><br><span class="line"></span><br><span class="line"># 解压包 </span><br><span class="line">tar -zxvf zabbix-4.0.19.tar.gz</span><br><span class="line"></span><br><span class="line"># 创建zabbix运行用户 </span><br><span class="line">useradd -M -s &#x2F;sbin&#x2F;nologin zabbix </span><br><span class="line"></span><br><span class="line"># 进入zabbix目录</span><br><span class="line">cd zabbix-4.0.19&#x2F;</span><br><span class="line"></span><br><span class="line"># 安装编译时的依赖包、库文件 </span><br><span class="line">yum -y install gcc curl curl-devel net-snmp net-snmp-devel perl-DBI libxml2-devel libevent-devel pcre mysql-devel </span><br><span class="line"></span><br><span class="line"># 预编译 </span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;zabbix  --enable-server --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2 --with-mysql</span><br><span class="line"></span><br><span class="line"># 编译并安装</span><br><span class="line">make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line"># 添加软连接 </span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;zabbix&#x2F;sbin&#x2F;zabbix_* &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="修改zabbix配置文件"><a href="#修改zabbix配置文件" class="headerlink" title="修改zabbix配置文件"></a>修改zabbix配置文件</h3><p><code>vim /usr/local/zabbix/etc/zabbix_server.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LogFile&#x3D;&#x2F;tmp&#x2F;zabbix_server.log</span><br><span class="line">DBHost&#x3D;127.0.0.1</span><br><span class="line">DBName&#x3D;zabbix </span><br><span class="line">DBUser&#x3D;zabbix </span><br><span class="line">DBPassword&#x3D;123456  #&quot;这里是你数据库zabbix用户的密码&quot;</span><br></pre></td></tr></table></figure>
<p><code>同时cp zabbix_server启动脚本至/etc/init.d/目录,添加执行权限并启动</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd  zabbix-4.0.19 </span><br><span class="line">cp  misc&#x2F;init.d&#x2F;tru64&#x2F;zabbix_server  </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;zabbix_server </span><br><span class="line">chmod o+x &#x2F;etc&#x2F;init.d&#x2F;zabbix_server </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;zabbix_server start</span><br></pre></td></tr></table></figure>
<p><code>创建zabbix数据库和导入sql文件</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入mysql创建zabbix数据库,执行授权命令</span><br><span class="line">create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">grant all on zabbix.* to zabbix@localhost identified by &#39;123456&#39;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 将Zabbix基础SQL文件导入数据至Zabbix数据库 </span><br><span class="line">cd zabbix-4.0.19 </span><br><span class="line">mysql -uzabbix -p123456 zabbix &lt;database&#x2F;mysql&#x2F;schema.sql</span><br><span class="line">mysql -uzabbix -p123456 zabbix &lt;database&#x2F;mysql&#x2F;images.sql</span><br><span class="line">mysql -uzabbix -p123456 zabbix &lt; database&#x2F;mysql&#x2F;data.sql</span><br></pre></td></tr></table></figure>
<h3 id="配置nginx和php-fpm整合"><a href="#配置nginx和php-fpm整合" class="headerlink" title="配置nginx和php-fpm整合"></a>配置nginx和php-fpm整合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/nginx1.png" class title="图示">
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/nginx2.png" class title="图示">
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/nginx3.png" class title="图示">

<h3 id="拷贝Zabbix-WEB网站程序至Nginx发布目录-并重启各项服务"><a href="#拷贝Zabbix-WEB网站程序至Nginx发布目录-并重启各项服务" class="headerlink" title="拷贝Zabbix-WEB网站程序至Nginx发布目录,并重启各项服务"></a>拷贝Zabbix-WEB网站程序至Nginx发布目录,并重启各项服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 拷贝zabbix-web网站程序 </span><br><span class="line">\cp -a &#x2F;root&#x2F;zabbix-4.0.19&#x2F;frontends&#x2F;php&#x2F;* &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;</span><br><span class="line"></span><br><span class="line"># 重启nginx </span><br><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line"># 重启php-fpm </span><br><span class="line">systemctl restart php-fpm</span><br><span class="line"></span><br><span class="line"># 重启mariadb </span><br><span class="line">systemctl restart mariadb</span><br><span class="line"></span><br><span class="line"># 重启zabbix服务,Zabbix_server默认监听端口为10051 </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;zabbix_server rstart</span><br></pre></td></tr></table></figure>

<h3 id="Zabbix-WEB-GUI安装配置"><a href="#Zabbix-WEB-GUI安装配置" class="headerlink" title="Zabbix WEB GUI安装配置"></a>Zabbix WEB GUI安装配置</h3><p><code>通过浏览器Zabbix_WEB验证，通过浏览器访问http://192.168.168.111/</code></p>
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/zabbix.jpg" class title="图示">
<p><code>单击下一步,如果有错误提示，需要把错误依赖解决完，方可进行下一步操作</code></p>
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/4.png" class title="图示">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 上述解决方法 </span><br><span class="line">yum  install  php-mbstring  php-bcmath  php-gd  php-xml  -y </span><br><span class="line">yum  install  gd  gd-devel  -y </span><br><span class="line">sed  -i &#39;&#x2F;post_max_size&#x2F;s&#x2F;8&#x2F;16&#x2F;g;&#x2F;max_execution_time&#x2F;s&#x2F;30&#x2F;300&#x2F;g;&#x2F;max_input_time&#x2F;s&#x2F;60&#x2F;300&#x2F;g;s&#x2F;\;date.timezone.*&#x2F;date.timezone \&#x3D;PRC&#x2F;g;s&#x2F;\;always_populate_raw_post_data&#x2F;always_populate_raw_post_data&#x2F;g&#39;  &#x2F;etc&#x2F;php.ini </span><br><span class="line"></span><br><span class="line"># 重启nginx和php-fpm </span><br><span class="line">systemctl restart nginx </span><br><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure>
<p><code>配置数据库连接，输入数据库名、用户、密码，单击Test connection，显示OK，单击下一步即可</code></p>
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/5.png" class title="图示">
<p><code>填写Zabbix Title显示，可以为空，可以输入自定义的名称。</code></p>
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/6png.png" class title="图示">

<p><code>需创建zabbix.conf.php文件,自己在/usr/local/nginx/html/conf/下创建一个zabbix.conf.php,在文件中增加下文的php语句,加上执行权限。或者单击“Download the configuration file”下载zabbix.conf.php文件，并将该文件上传至/usr/local/nginx/html/conf/，并设置可写权限，刷新WEB页面，zabbix.conf.php内容代码如下，最后单击Finish即可</code></p>
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/7.png" class title="图示">

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Zabbix GUI configuration file.</span></span><br><span class="line"><span class="keyword">global</span> $DB；</span><br><span class="line">$DB[<span class="string">'TYPE'</span>]     = <span class="string">'MYSQL'</span>;</span><br><span class="line">$DB[<span class="string">'SERVER'</span>]   = <span class="string">'localhost'</span>;</span><br><span class="line">$DB[<span class="string">'PORT'</span>]     = <span class="string">'0'</span>;</span><br><span class="line">$DB[<span class="string">'DATABASE'</span>] = <span class="string">'zabbix'</span>;</span><br><span class="line">$DB[<span class="string">'USER'</span>]     = <span class="string">'zabbix'</span>;</span><br><span class="line">$DB[<span class="string">'PASSWORD'</span>] = <span class="string">'123456'</span>;</span><br><span class="line"><span class="comment">// Schema name. Used for IBM DB2 and PostgreSQL.</span></span><br><span class="line">$DB[<span class="string">'SCHEMA'</span>] = <span class="string">''</span>;</span><br><span class="line">$ZBX_SERVER      = <span class="string">'localhost'</span>;</span><br><span class="line">$ZBX_SERVER_PORT = <span class="string">'10051'</span>;</span><br><span class="line">$ZBX_SERVER_NAME = <span class="string">'zabbix监控'</span>;</span><br><span class="line">$IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;</span><br></pre></td></tr></table></figure>
<p>登录Zabbix WEB界面，默认用户名和密码为：Admin/zabbix</p>
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/zabbixweb.jpg" class title="图示">
<img src="/2020/12/30/LNMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/8.png" class title="图示">]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zabbix监控</tag>
      </tags>
  </entry>
  <entry>
    <title>LAMP搭建zabbix监控平台</title>
    <url>/2020/12/30/LAMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p><strong>部署LAMP(Linux+Apache+Mariadb+PHP)环境</strong></p>
<a id="more"></a>
<h3 id="安装LAMP环境"><a href="#安装LAMP环境" class="headerlink" title="安装LAMP环境"></a>安装LAMP环境</h3><p><code>yum install httpd httpd-devel mariadb mariadb-server mariadb-devel php-common php-gd php-mbstring php-xml php-bcmath php-mysql php-cli php-devel php-pear -y</code></p>
<h3 id="添加Zabbix扩展源"><a href="#添加Zabbix扩展源" class="headerlink" title="添加Zabbix扩展源"></a>添加Zabbix扩展源</h3><p><code>rpm -i https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</code></p>
<h3 id="修改-etc-yum-repos-d-zabbix-repo内容如下"><a href="#修改-etc-yum-repos-d-zabbix-repo内容如下" class="headerlink" title="修改/etc/yum.repos.d/zabbix.repo内容如下"></a>修改/etc/yum.repos.d/zabbix.repo内容如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat&gt;&#x2F;etc&#x2F;yum.repos.d&#x2F;zabbix.repo&lt;&lt;EOF</span><br><span class="line">[zabbix]</span><br><span class="line">name&#x3D;Zabbix Official Repository - $basearch</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;zabbix&#x2F;zabbix&#x2F;4.0&#x2F;rhel&#x2F;7&#x2F;$basearch&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;zabbix&#x2F;RPM-GPG-KEY-ZABBIX-A14FE591</span><br><span class="line">[zabbix-non-supported]</span><br><span class="line">name&#x3D;Zabbix Official Repository non-supported - $basearch</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;zabbix&#x2F;non-supported&#x2F;rhel&#x2F;7&#x2F;$basearch&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;zabbix&#x2F;RPM-GPG-KEY-ZABBIX</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="安装Zabbix相关软件包"><a href="#安装Zabbix相关软件包" class="headerlink" title="安装Zabbix相关软件包"></a>安装Zabbix相关软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install zabbix-server-mysql zabbix-web-mysql zabbix-agent -y </span><br><span class="line">sed -i &#39;&#x2F;date.timezone&#x2F;i date.timezone &#x3D; PRC&#39; &#x2F;etc&#x2F;php.ini</span><br></pre></td></tr></table></figure>
<h3 id="启动相关服务并关闭selinux和防火墙"><a href="#启动相关服务并关闭selinux和防火墙" class="headerlink" title="启动相关服务并关闭selinux和防火墙"></a>启动相关服务并关闭selinux和防火墙</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd </span><br><span class="line">systemctl restart mariadb </span><br><span class="line">systemctl stop firewalld </span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>
<h3 id="创建数据库和密码授权"><a href="#创建数据库和密码授权" class="headerlink" title="创建数据库和密码授权"></a>创建数据库和密码授权</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database zabbix character set utf8 collate utf8_bin;</span><br><span class="line">grant all on zabbix.* to zabbix@localhost identified by &#39;123456&#39;; flush privileges;</span><br></pre></td></tr></table></figure>
<h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p><code>zcat /usr/share/doc/zabbix-server-mysql-4.0.19/create.sql.gz|mysql -uzabbix -p123456 zabbix</code></p>
<h3 id="编辑zabbix配置文件并启动"><a href="#编辑zabbix配置文件并启动" class="headerlink" title="编辑zabbix配置文件并启动"></a>编辑zabbix配置文件并启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_server.conf </span><br><span class="line"></span><br><span class="line">核对一下配置文件中以下几个参数: </span><br><span class="line">DBHost&#x3D;localhost </span><br><span class="line">DBName&#x3D;zabbix </span><br><span class="line">DBUser&#x3D;zabbix </span><br><span class="line">DBPassword&#x3D;123456</span><br></pre></td></tr></table></figure>
<p>systemctl start zabbix-server.service<br>netstat -lntp | grep 10051 出现端口则正常</p>
<h3 id="Zabbix-WEB-GUI安装配置"><a href="#Zabbix-WEB-GUI安装配置" class="headerlink" title="Zabbix WEB GUI安装配置"></a>Zabbix WEB GUI安装配置</h3><p>通过浏览器Zabbix_WEB验证，通过浏览器访问<a href="http://x.x.x.x/" target="_blank" rel="noopener">http://x.x.x.x/</a> (x为主机IP),如图13-4所示</p>
<img src="/2020/12/30/LAMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/1.jpg" class title="图示">
<p>点下一步,出现有错误提示,需要把错误依赖解决完</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum  install  php-mbstring  php-bcmath  php-gd  php-xml  -y yum  install  gd  gd-devel  -y </span><br><span class="line"></span><br><span class="line"># 修改php.ini对应参数的值 </span><br><span class="line">sed -i &#39;&#x2F;post_max_size&#x2F;s&#x2F;8&#x2F;16&#x2F;g;&#x2F;max_execution_time&#x2F;s&#x2F;30&#x2F;300&#x2F;g;&#x2F;max_input_time&#x2F;s&#x2F;60&#x2F;300&#x2F;g;s&#x2F;\;date.timezone.*&#x2F;date.timezone \&#x3D; PRC&#x2F;g;s&#x2F;\;always_populate_raw_post_data&#x2F;always_populate_raw_post_data&#x2F;g&#39; &#x2F;etc&#x2F;php.ini </span><br><span class="line"></span><br><span class="line">service  httpd  restart</span><br></pre></td></tr></table></figure>
<p>之后刷新网页,点击下一步,配置数据库连接，输入数据库名、用户、密码，单击Test connection，显示OK，单击下一步即可</p>
<img src="/2020/12/30/LAMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/2.jpg" class title="图示">
<p>继续单击下一步出现填写Zabbix Title显示,可以为空,可以输入自定义的名字<br>单击下一步,需要创建zabbix.conf.php文件,并把下方代码复制进去,或者单击“Download the configuration file”下载zabbix.conf.php文件,并将该文件上传至/var/www/html/conf/,并设置可写权限,刷新WEB页面,zabbix.conf.php内容代码如下,最后单击Finish即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Zabbix GUI configuration file.</span></span><br><span class="line"><span class="keyword">global</span> $DB;</span><br><span class="line">$DB[<span class="string">'TYPE'</span>] = <span class="string">'MYSQL'</span>;</span><br><span class="line">$DB[<span class="string">'SERVER'</span>] = <span class="string">'localhost'</span>;</span><br><span class="line">$DB[<span class="string">'PORT'</span>] = <span class="string">'0'</span>;</span><br><span class="line">$DB[<span class="string">'DATABASE'</span>] = <span class="string">'zabbix'</span>;</span><br><span class="line">$DB[<span class="string">'USER'</span>] = <span class="string">'zabbix'</span>;</span><br><span class="line">$DB[<span class="string">'PASSWORD'</span>] = <span class="string">'123456'</span>;</span><br><span class="line"><span class="comment">// Schema name. Used for IBM DB2 and PostgreSQL.</span></span><br><span class="line">$DB[<span class="string">'SCHEMA'</span>] = <span class="string">''</span>；</span><br><span class="line">$ZBX_SERVER = <span class="string">'localhost'</span>;</span><br><span class="line">$ZBX_SERVER_PORT = <span class="string">'10051'</span>;</span><br><span class="line">$ZBX_SERVER_NAME = <span class="string">'irene'</span>;</span><br><span class="line">$IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;</span><br></pre></td></tr></table></figure>
<img src="/2020/12/30/LAMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/3.jpg" class title="图示">
<p>登录Zabbix WEB界面，默认用户名和密码为：Admin/zabbix</p>
<img src="/2020/12/30/LAMP%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0/4.jpg" class title="图示">]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zabbix监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>linux磁盘阵列(RAID)</title>
    <url>/2020/03/15/linux%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><pre><code>磁盘阵列分为软件,硬件磁盘阵列,这里主要是讲软件磁盘阵列,要知道在创建时步骤是什么,删除该如何删除等等,废话就不多讲了,理论与实践为主,⬇下方请点击展开全文</code></pre><a id="more"></a>
<blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=35416347&auto=0&height=66"></iframe>
</blockquote>
<h2 id="磁盘阵列RAID"><a href="#磁盘阵列RAID" class="headerlink" title="磁盘阵列RAID"></a>磁盘阵列RAID</h2><p>磁盘阵列(Redundant Arrays of Independent Disks，RAID),通过技术(软件或硬件)将多个较小的磁盘整合成为一个较大的磁盘设备,但是这个较大的磁盘设备并不只是存储而已,还具有数据保护的功能,RAID有几种级别,常见的分别有(RAID0,RAID1,RAID5,RAID6,RAID10,RAID50),选择不同的Raid级别整合之后,功能当然就会有所不同,而建立RAID命令其实很简单,一起来看看:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mdadm  --create  &#x2F;dev&#x2F;md[0-9] --auto&#x3D;yes --level&#x3D;[0,1,5,6] --chunk&#x3D;NK --raid-devices&#x3D;N --spare-devices&#x3D;N &#x2F;dev&#x2F;sdc &#x2F;dev&#x2F;sdx</span><br></pre></td></tr></table></figure>
<h4 id="选项参数的意思"><a href="#选项参数的意思" class="headerlink" title="选项参数的意思:"></a>选项参数的意思:</h4><pre><code>--create或-C : 建立一个新的磁盘阵列
--auto=yes : 决定建立后面接的软件磁盘阵列设备,即/dev/md0,/dev/md1等等
--chunk或者-c : 决定这个设备的chunk大小,也可以当成stripe大小,一般为64K或512K
--raid-devices或-n : 使用几个磁盘分区作为磁盘阵列的设备 
--spare-devices或-x : 使用几个磁盘设备作为备用设备
--level=[0,1,5,6,10] : 设置这组磁盘阵列的级别
--detail或-D : 后面所接的那个磁盘阵列设备的详细信息 
--scan或-s : 扫描配置文件/proc/mdstat,得到阵列缺失信息
--add或-a : 添加设备到阵列
-v : 显示详细信息</code></pre><hr>
<ul>
<li><p>RAID 0(等量模式),性能最佳: </p>
<ul>
<li>这种模式如果使用相同型号与容量的磁盘组成的话,效果上会很好,接下来需要两块磁盘做RAID0,如:<tr>/dev/sdb和/dev/sdc,也可以是/dev/sdb1和/dev/sdb2</tr></li>
<li><code>mdadm -C -v /dev/md0 -l 0 -n 2 /dev/sdb{1,2}</code> 之后会有array /dev/md0 started表示成功了,然后可以输入: <code>mdadm -DS</code>,可以查看本机上的所有RAID,如若查看详细信息:<code>mdadm -D /dev/md0</code>即可。</li>
<li><code>mdadm -DS &gt; /etc/mdadm.conf</code> 生成配置文件,这一步主要是你在停止RAID的之后再打开时,是要读取配置文件的,所以避免掉坑。</li>
<li><code>mkfs.xfs /dev/md0</code> 这里你可以格式成其他文件系统如ext4就为mkfs.ext4。</li>
<li><code>mkdir /raid0</code> 创建挂载目录,没啥好说,目录名自定义即可。</li>
<li><code>mount /dev/md0 /raid0</code> 把磁盘阵列挂载到目录上,就可以使用了,用<code>df -h /raid0</code>查看。</li>
<li><code>blkid /dev/md0</code>然后找到UUID并且写到/etc/fstab下面,如<code>&quot;UUID=5bda0872-c4a2-85ad-a48f-5621d8zad001 /raid0 xfs defaults 0 0</code></li>
</ul>
</li>
<li><p>RAID 1(镜像模式, mirror),完整备份:</p>
<ul>
<li><code>mdadm -C -v /dev/md1 -l 1 -n 2 -x 1 /dev/sd[c,d,e]</code></li>
<li><code>mdadm -Dsv &gt; /etc/mdadm.conf</code></li>
<li><code>mkfs.xfs /dev/md1</code></li>
<li><code>mkdir /raid1 &amp;&amp; mount /dev/md1 /raid1</code></li>
<li><code>mdadm /dev/md1 -f /dev/sdc</code>模拟/dev/sdc出错,看备份盘是否会顶替继续工作,当你使用<code>mdadm -D /dev/md1</code>会发现出错磁盘已经被备份磁盘替换了,热备份的操作,是不是觉得会方便很多,至少还可以正常继续用 </li>
<li><code>mdadm -r /dev/md1 /dev/sdc</code>移除掉出错盘,同样<code>mdadm -a /dev/md1 /dev/sdf</code>新加块热备盘</li>
</ul>
</li>
<li><p>RAID 5(性能与数据备份的均衡考虑):</p>
<ul>
<li>首先呢,我们准备5个分区,可以使用gdisk来分区,如<code>gdisk /dev/sdb</code>按n新加分区,具体操作不多说了,最后分区为:/dev/sdb5,/dev/sdb6,/dev/sdb7,/dev/sdb8,/dev/sdb9</li>
<li><code>mdadm -C /dev/md0 --auto=yes -l=5 -c=256K -n=4 -x=1 /dev/sdb{5..9}</code>创建RAID5之后,<code>mdadm -D /dev/md0</code>查看信息</li>
<li><code>cat /proc/mdstat</code>可以使用此文件来查看系统软件磁盘阵列的情况</li>
<li><code>mkfs.xfs -f -d su=256K,sw=3 -r extsize=768K /dev/md0</code>纳闷后面参数是什么对吧,因为chunk容量为256K,所以su=256K,而共有4块组成RAID5,RAID5它的总容量是整体减去一块磁盘或分区,而热备份盘不算上,所以(4-1=3),则sw=3,然后这两项计算数据宽度为:256K*3=768K</li>
<li><code>mkdir /raid5 &amp;&amp; mount /dev/md0 /raid5</code>就可以使用了</li>
<li><code>mdadm --mange /dev/md[0-9] [-a 设备] [-r 设备] [-f 设备]</code>跟前文同样的操作,都可以</li>
<li><code>mdadm --mange /dev/md0 -f /dev/sdb7</code>同样删除<code>mdadm --mange /dev/md0 -r /dev/sdb7</code>增加<code>mdadm --mange /dev/md0 -a /dev/sdb7</code></li>
<li><code>mdadm -Dsv &gt; /etc/mdadm.conf</code>停止md0磁盘阵列前,一定要注意数据已经同步到/etc/mdadm.conf,<code>mdadm -D /dev/md0</code>出现resync则同步完成,使用<code>mdadm -S /dev/md0</code>停止,使用<code>mdadm -As</code>激活</li>
<li><code>mdadm -G /dev/md0 -n 5 -c 256K</code>可以扩展RAID5,使它可用磁盘数量为5块, <code>mdadm -Dsv &gt; /etc/mdadm.conf</code>保存配置文件，服务器启动时自动加载</li>
<li>1.第一种删除RAID方法: <code>umount /raid0</code>,如果有写进/etc/fstab,把哪一行删了,然后覆盖RAID的metadata和superblock, <code>dd if=/dev/zero of=/dev/md0 bs=1M count=50</code>, <code>mdadm -S /dev/md0</code>, 过来就把磁盘或分区覆盖一下,<code>dd if=/dev/zero of=/dev/sdb5 bs=1M count=10; dd if=/dev/zero of=/dev/sdb6 bs=1M count=10; dd if=/dev/zero of=/dev/sdb7 bs=1M count=10; dd if=/dev/zero of=/dev/sdb8 bs=1M count=10; dd if=/dev/zero of=/dev/sdb9 bs=1M count=10</code>,就行了看了<code>cat /proc/mdstat</code>会发现不存在了</li>
<li>2.第二种删除RAID方法: <code>umount /dev/md0 /raid0</code>, <code>mdadm -Ss</code> 停止 raid 设备, <code>rm -rf /etc/mdadm.conf</code> 删除 raid 配置文件, <code>mdadm --zero-superblock /dev/sdb5</code>清除物理磁盘中的 raid 标识,一个个清除完就行了</li>
</ul>
</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote>
<p><strong>&lt;&lt;鸟哥的Linux私房菜&gt;&gt;</strong> 和 <strong>&lt;&lt;学神IT&gt;&gt;</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑卷管理器LVM</title>
    <url>/2020/03/16/lvm/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><pre><code>LVM的全名时Logical Volume Manager,它的作用是将几个物理的分区或磁盘通过软件组合成为一块看起来是独立的大磁盘(VG),再然后就是把这个大磁盘经过划分成为可以用的分区,直接挂载就能用了,好处划分后的分区容量不够,又可在大磁盘里加容量到分区,大磁盘不够又可以添加物理分区或磁盘,非常的方便。</code></pre><a id="more"></a>
<blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=414706265&auto=0&height=66"></iframe>
</blockquote>
<h3 id="PV-PE-VG-LV的意义"><a href="#PV-PE-VG-LV的意义" class="headerlink" title="PV,PE,VG,LV的意义:"></a>PV,PE,VG,LV的意义:</h3><pre><code>1. 物理卷(Physical Volume, PV)：就是我们实际的分区, 通过pvcreate命令将它转成LVM最底层的物理卷,这样就可以使用这些PV了
2. 卷组(Volume Group, VG)：刚前言部分所讲的大磁盘就是卷组,它是将许多的PV整合成这个VG
3. 物理扩展块(Physical Extent, PE)： LVM默认使用4MB的PE数据块,PE是整个LVM最小的存储单位,我们的文件数据都是借由写入PE来完成的,可以说有点像文件系统里面的block大小,所以调整PE会影响到LVM的最大容量
4. 逻辑卷(Logical Volume,LV)：在最后VG还得切成LV,然后格式化之后,挂载就能用了,至于使LVM弹性修改文件系统容量,就是将PE加到LV中,要减少容量,反之即可</code></pre><h3 id="PV操作阶段"><a href="#PV操作阶段" class="headerlink" title="PV操作阶段:"></a>PV操作阶段:</h3><pre><code>首先用fdisk或gdisk分区,我这里使用gdisk来分区,并且把linux file system改成8E00,不改也没问题的
gdisk -l /dev/sdb 查看分区情况
gdisk /dev/sdb 分区
我的分区是/dev/sdb1、2、3、4

创建PV,使用pvcreate即可,一些命令如下:
* pvcreate：将物理分区建立成为PV
* pvscan：查找目前系统里面任何具有PV的磁盘
* pvdisplay: 显示出目前系统上面的PV状态
* pvremove: 将PV属性删除,使该分区不具有PV属性</code></pre><ul>
<li><code>pvcreate /dev/sdb{1,2,3,4}</code></li>
<li><code>pvscan</code></li>
<li><code>pvdisplay /dev/sdb1</code></li>
</ul>
<h3 id="VG操作阶段"><a href="#VG操作阶段" class="headerlink" title="VG操作阶段:"></a>VG操作阶段:</h3><pre><code>VG命令:
* vgcreate: 创建VG的命令
* vgscan: 查找系统上面是否存在VG
* vgdisplay: 显示目前系统上面的VG状态
* vgextend: 在VG内增加额外的PV
* vgreduce: 在VG内删除PV
* vgchange: 设置VG是否启动
* vgremove: 删除一个VG</code></pre><ul>
<li><code>vgcreate -s 16M irenevg /dev/sdb{1,2,3}</code> 让sdb1,2,3创建成为VG,名称是irenevg(自定义名称),指定PV为16M</li>
<li><code>vgextend irenevg /dev/sdb4</code>如果你想增加VG的容量就这么操作,又可以拿新的分区创建好PV之后加进来,就可以不断的扩容。</li>
</ul>
<h3 id="LV操作阶段"><a href="#LV操作阶段" class="headerlink" title="LV操作阶段"></a>LV操作阶段</h3><pre><code>创建完VG之后就是建立LV了,命令跟VG,PV都一样的,只是把vg或pv改成lv
如：lvcreate 建立LV
    lvresize 这个是对LV进行容量大小的调整</code></pre><ul>
<li><code>lvcreate -L 2G -n irenelv irenevg</code> 将irenevg分2G给irenelv,或者是<code>lvcreate -l 128 -n irenelv irenevg</code>，(-L是后面是容量,单位有M,G,T)(-l后面是PE的个数,因为把PV大小设为了16M,所以16*128=2048,就是2G了)</li>
<li><code>mkfs.xfs /dev/irenevg/irenelv</code> 格式化</li>
<li><code>mkdir /mnt/lvm</code>创建挂载点</li>
<li><code>mount /dev/irenevg/irenelv /mnt/lvm</code>挂载之后就可以使用了喔     </li>
</ul>
<blockquote>
<p>放大LV容量<br>    前面已经说了VG怎么加大容量,而LV该如何从VG里分容量给自己呢?<br>    首先查看VG所剩的Free PE,就是剩余容量</p>
</blockquote>
<ul>
<li><code>vgdisplay irenevg</code></li>
<li><code>lvresize -L +500M /dev/irenevg/irenelv</code>这样放大LV,加了500M进去</li>
<li><code>lvscan</code>可以看到/dev/irenevg/irenelv从2G变成了2.5G</li>
<li><code>xfs_growfs /mnt/lvm</code>加大lv容量,但挂载的文件系统容量并没变,这一步是关键,执行之后再查看就会发现容量增加了,最后LVM逻辑卷管理器就做完了</li>
</ul>
<h3 id="使用LVM-thin-Volume使LVM动态自动调整磁盘使用率"><a href="#使用LVM-thin-Volume使LVM动态自动调整磁盘使用率" class="headerlink" title="使用LVM thin Volume使LVM动态自动调整磁盘使用率"></a>使用LVM thin Volume使LVM动态自动调整磁盘使用率</h3><pre><code>这个其实是拿来骗人的,因为你有个磁盘是3TB,但是未来会用到5TB,但是你至少接下来这一段时间是还没办法超过3TB,达到5TB,又不能让用户知道只有3TB,所以LVM thin Volume就是调整到5TB,看着是5TB,实际上能用的只有3TB
概念就是:建立一个可以实用实取的,用多少容量才分配实际写入多少容量的磁盘容量存储池,然后再由存储池产生一个指定要固定容量大小的lv设备
因此实际写入3TB容量的存储池,再产生一个5TB的LV设备,实际只能用到3TB懂了吧,感觉这就是障眼法,唬人还可以</code></pre><ol>
<li><code>lvcreate -L 1G -T irenevg/irenepool</code>创建thin pool设备</li>
<li><code>lvdisplay /dev/irenevg/irenepool</code>查看,或者<code>lvs irenevg</code></li>
<li><code>lvcreate -V 20G -T irenevg/irenepool -n irenethin1</code>建立20G的irenethin1,必须要链接到irenepool这个地址池,之后lvs irenevg就可以看到20G的irenethin1这个设备</li>
<li><code>mkfs.xfs /dev/irenevg/irenethink1</code></li>
<li><code>mkdir /mnt/thin</code></li>
<li><code>mount /dev/irenevg/irenethink1 /mnt/thin</code>之后就可以使用了,可以用<code>df -Th /mnt/thin</code>看下容量,但是实际只能用的还是刚写进地址池的1G</li>
</ol>
<h3 id="LVM的LV磁盘快照"><a href="#LVM的LV磁盘快照" class="headerlink" title="LVM的LV磁盘快照"></a>LVM的LV磁盘快照</h3><pre><code>快照就是将当时的系统信息记录下来，未来有任何数据修改,则原始数据会被搬移到快照区</code></pre><ol>
<li><code>vgdisplay irenevg</code>查看还有多少剩余容量,我这里只剩25PE</li>
<li><code>lvcreate -s -l 25 -n irenesnap /dev/irenevg/irenelv</code>  把剩下的PE都给快照区了</li>
<li><code>mkdir /mnt/snap</code></li>
<li><code>mount -o nouuid /dev/irenevg/irenesnap /mnt/snap</code>让文件系统忽略相同UUID，挂载到/mnt/snap</li>
<li>你可以复制一些目录到lv挂载目录,如我的在/mnt/lvm,cp一些文件或目录,然后删除一些,查看/mnt/snap会发现删除的哪些都在快照区</li>
<li><code>xfsdump -l 0 -L lvm -M lvm -f /root/lvm.dump /mnt/snap</code>把快照区挂载点里面的文件或目录都备份到了/root/lvm.dump,如果想还原/mnt/lvm,就用xfsrestore恢复</li>
</ol>
<h3 id="LVM的删除"><a href="#LVM的删除" class="headerlink" title="LVM的删除"></a>LVM的删除</h3><pre><code>* 先卸载系统上面的LVM文件系统(快照和所有的LV)
* 使用lvremove删除掉LV
* 使用vgchange -a n VGname 使VG不具有Active标志
* 使用vgremove删除VG
* 使用pvremove删除PV
* 如果改了系统id就修改回来</code></pre><ol>
<li><code>umount /mnt/lvm /mnt/thin /mnt/snap</code></li>
<li><code>lvs irenevg</code></li>
<li><code>lvremove /dev/irenevg/irenethin1 /dev/irenevg/irenepool</code></li>
<li><code>lvremove /dev/irenevg/irenelv</code></li>
<li><code>vgchange -a n irenevg</code></li>
<li><code>vgremove irenevg</code></li>
<li><code>pvremove /dev/sdb{1,2,3,4}</code></li>
<li><code>gdisk /dev/sdb</code> 把8E00改回8300,就完成了,如果没做这一步就不用了</li>
</ol>
<h3 id="使用SSM工具创建可动态扩容的存储池"><a href="#使用SSM工具创建可动态扩容的存储池" class="headerlink" title="使用SSM工具创建可动态扩容的存储池"></a>使用SSM工具创建可动态扩容的存储池</h3><ol>
<li><code>yum -y install system-storage-manager</code>首先安装ssm工具</li>
<li><code>ssm list dev</code>查看磁盘信息</li>
<li><code>ssm list pool</code>存储池的信息</li>
<li><code>mkdir /mnt/ssm</code></li>
<li><code>ssm create -s 1G -n ssmlv --fstype xfs -p ssmvg /dev/sdb{1,2,3,4} /mnt/ssm</code> 意思是:ssm create -s lv大小 -n lv名称 –fstype lv文件系统类型 -p 卷组名 设备 挂载点</li>
<li><code>ssm add -p ssmvg /dev/sdb5</code>将物理磁盘添加到卷组中</li>
<li><code>ssm resize -s +500M /dev/ssmvg/ssmlv</code>扩大LVM卷的容量</li>
<li><code>ssm snapshot /dev/ssmvg/ssmlv</code>对LVM卷的快照功能</li>
<li><code>ssm remove /dev/ssmvg/ssmlv</code>删除LVM卷</li>
<li><code>ssm remove ssmvg</code>删除卷组<blockquote>
<p>更多的用法就不详细讲了,可以自行查阅资料来补充</p>
</blockquote>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote>
<p><strong>&lt;&lt;鸟哥的Linux私房菜&gt;&gt;</strong> 和 <strong>&lt;&lt;学神IT&gt;&gt;</strong></p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LVM使用</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx的反向代理</title>
    <url>/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p><strong>准备</strong><br><code>RS为两台真实服务器,ip为别192.168.168.140和192.168.168.149
当pc机访问LB服务器时,通过配置nginx反向代理,实际访问的是RS1和RS2</code></p>
<a id="more"></a>

<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/topo.jpg" class title="图示">

<p><code>首先在两台RS服务器上开启nginx或者http服务,然后在LB上启动nginx</code></p>
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/1.jpg" class title="图示">
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/2.jpg" class title="图示">
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/4.png" class title="图示">

<p><code>设置LB的nginx配置文件nginx.conf,在nginx.conf中增加下图红线处代码,weight=数值,代表权重的大小,不写weight代表使用轮询方式</code></p>
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/5.png" class title="图示">
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/6.png" class title="图示">

<p><code>进行测试,首先在两个RS服务器/usr/share/nginx/html/下分别建了两个index.html,并分别写入不同内容,用来测试,重启LB的nginx服务,在客户端访问LB的ip地址,会发现几乎是轮流出现RS1和RS2,如果加了权重,则权重高的承受的访问次数就更多</code></p>
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7.png" class title="图示">
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/8.png" class title="图示">
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/9.png" class title="图示">
<img src="/2020/12/30/nginx%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/10.png" class title="图示">]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之浮动</title>
    <url>/2020/12/26/%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="1-浮动-float"><a href="#1-浮动-float" class="headerlink" title="1. 浮动(float)"></a>1. 浮动(float)</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li><strong>记忆</strong><ul>
<li>能够说出 CSS 的布局的三种机制</li>
</ul>
</li>
<li><strong>理解</strong><ul>
<li>能够说出普通流在布局中的特点</li>
<li>能够说出我们为什么用浮动</li>
<li>能够说出我们为什么要清除浮动</li>
</ul>
</li>
<li><strong>应用</strong><ul>
<li>能够利用浮动完成导航栏案例</li>
<li>能够清除浮动</li>
<li>能够使用PS切图工具<a id="more"></a>
<h3 id="1-1-CSS-布局的三种机制"><a href="#1-1-CSS-布局的三种机制" class="headerlink" title="1.1 CSS 布局的三种机制"></a>1.1 CSS 布局的三种机制</h3></li>
</ul>
</li>
</ul>
<blockquote>
<p>网页布局的核心——就是<strong>用 CSS 来摆放盒子</strong>。</p>
</blockquote>
<p>CSS 提供了 <strong>3 种机制</strong>来设置盒子的摆放位置，分别是<strong>普通流</strong>（标准流）、<strong>浮动</strong>和<strong>定位</strong>，其中： </p>
<ol>
<li><strong>普通流</strong>（标准流）<ul>
<li><strong>块级元素</strong>会独占一行，<strong>从上向下</strong>顺序排列；<ul>
<li>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</li>
</ul>
</li>
<li><strong>行内元素</strong>会按照顺序，<strong>从左到右</strong>顺序排列，碰到父元素边缘则自动换行；<ul>
<li>常用元素：span、a、i、em等</li>
</ul>
</li>
</ul>
</li>
<li><strong>浮动</strong><ul>
<li>让盒子从普通流中<strong>浮</strong>起来,主要作用让多个块级盒子一行显示。</li>
</ul>
</li>
<li><strong>定位</strong><ul>
<li>将盒子<strong>定</strong>在浏览器的某一个<strong>位</strong>置——CSS 离不开定位，特别是后面的 js 特效。</li>
</ul>
</li>
</ol>
<h3 id="1-2-为什么需要浮动？"><a href="#1-2-为什么需要浮动？" class="headerlink" title="1.2 为什么需要浮动？"></a>1.2 为什么需要浮动？</h3><p>思考题：</p>
<p> 我们首先要思考以下2个布局中最常见的问题？</p>
<ol>
<li><p>如何让多个盒子(div)水平排列成一行？</p>
<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/03_水平排列div.png">
</li>
<li><p>如何实现盒子的左右对齐？</p>
</li>
</ol>
<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/float1.png">

<p>虽然我们前面学过行内块（inline-block） 但是他却有自己的缺陷：</p>
<ol>
<li>它可以实现多个元素一行显示，但是中间会有空白缝隙，不能满足以上第一个问题。</li>
<li>它不能实现以上第二个问题，盒子左右对齐 </li>
</ol>
<p><strong>pink老师一句话总结他们</strong></p>
<blockquote>
<p>因为一些网页布局要求，标准流不能满足我们的需要了，因此我们需要浮动来完成网页布局。</p>
</blockquote>
<h3 id="1-3-什么是浮动-float"><a href="#1-3-什么是浮动-float" class="headerlink" title="1.3  什么是浮动(float)"></a>1.3  什么是浮动(float)</h3><p><strong>概念</strong>：元素的浮动是指<strong>设置了浮动属性的元素</strong>会</p>
<ol>
<li>脱离标准普通流的控制</li>
<li>移动到指定位置。</li>
</ol>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol>
<li><strong>让多个盒子(div)水平排列成一行</strong>，使得浮动成为布局的重要手段。</li>
<li>可以实现盒子的左右对齐等等..</li>
<li>浮动最早是用来<strong>控制图片</strong>，实现<strong>文字环绕图片的效果</strong>。</li>
</ol>
<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/01_文字环绕示意图.png">

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>在 CSS 中，通过 <code>float</code>  中文，  浮 漏 特    属性定义浮动，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器 &#123; float: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>none</strong></td>
<td>元素不浮动（<strong>默认值</strong>）</td>
</tr>
<tr>
<td><strong>left</strong></td>
<td>元素向<strong>左</strong>浮动</td>
</tr>
<tr>
<td><strong>right</strong></td>
<td>元素向<strong>右</strong>浮动</td>
</tr>
</tbody></table>
<p>pink老师教你学浮动口诀。通过 <code>float</code>   —–  浮 漏 特</p>
<h4 id="1-浮动口诀之-浮"><a href="#1-浮动口诀之-浮" class="headerlink" title="1). 浮动口诀之 浮"></a>1). 浮动口诀之 浮</h4><p>浮动——浮<del>浮</del>浮<del>~</del>漂浮在普通流的上面。  脱离标准流。 俗称 “脱标”   </p>
 <img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/23浮动脱标.png">

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong>：</p>
<ul>
<li><code>float</code> 属性会让盒子漂浮在标准流的上面，所以第二个标准流的盒子跑到浮动盒子的底下了。</li>
</ul>
<h4 id="2-浮动口诀之-漏"><a href="#2-浮动口诀之-漏" class="headerlink" title="2).  浮动口诀之 漏"></a>2).  浮动口诀之 漏</h4><p>浮动——漏<del>漏</del>漏~  浮动的盒子，把自己原来的位置漏给下面标准流的盒子，就是不占有原来位置，是脱离标准流的，我们俗称 “脱标”。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">/* 让第 1 个盒子漂浮起来，不占位置 */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 所以，box2下面的其实就是跑到box1盒子下面了， 被box1给压住了，遮挡起来了</p>
<p>来来来，我们看个立体图</p>
<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/zou.gif">

<h4 id="3-浮动口诀之-特"><a href="#3-浮动口诀之-特" class="headerlink" title="3). 浮动口诀之 特"></a>3). 浮动口诀之 特</h4><p>浮动——特性  float属性会改变元素display属性。</p>
<p>任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。 生成的块级框和我们前面的行内块极其相似。</p>
<p>体验案例——div 水平排列</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 转换为行内块元素，可以水平显示，不过 div 之间有间隙，不方便处理 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* display: inline-block; */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置浮动属性，可以让 div 水平排列，并且没有间隙 */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: hotpink;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/24浮动一行显示.png">

<p><strong>注意： 浮动的元素互相贴靠一起的，但是如果父级宽度装不下这些浮动的盒子， 多出的盒子会另起一行对齐</strong></p>
<h3 id="1-4-浮动-float-小结"><a href="#1-4-浮动-float-小结" class="headerlink" title="1.4 浮动(float)小结"></a>1.4 浮动(float)小结</h3><blockquote>
<p>我们使用浮动的核心目的——让多个块级盒子在同一行显示。 因为这是我们最常见的一种布局方式</p>
</blockquote>
<p><strong>float</strong> —— <strong>浮漏特</strong></p>
<table>
<thead>
<tr>
<th>特点</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>浮</td>
<td>加了浮动的盒子<strong>是浮起来</strong>的，漂浮在其他标准流盒子的上面。</td>
</tr>
<tr>
<td>漏</td>
<td>加了浮动的盒子<strong>是不占位置的</strong>，它原来的位置<strong>漏给了标准流的盒子</strong>。</td>
</tr>
<tr>
<td>特</td>
<td><strong>特别注意</strong>：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙</td>
</tr>
</tbody></table>
<h3 id="1-5-浮动-float-的应用（重要）"><a href="#1-5-浮动-float-的应用（重要）" class="headerlink" title="1.5 浮动(float)的应用（重要）"></a>1.5 浮动(float)的应用（重要）</h3><h4 id="浮动和标准流的父盒子搭配"><a href="#浮动和标准流的父盒子搭配" class="headerlink" title="浮动和标准流的父盒子搭配"></a>浮动和标准流的父盒子搭配</h4><p>我们知道，浮动是脱标的，会影响下面的标准流元素，此时，我们需要给浮动的元素添加一个标准流的父亲，这样，最大化的减小了对其他标准流的影响。</p>
<p><strong>pink老师说：</strong></p>
<blockquote>
<p>一个完整的网页，是 标准流 +  浮动 +  我们后面要讲的定位 一起完成的。</p>
</blockquote>
<h4 id="浮动应用案例"><a href="#浮动应用案例" class="headerlink" title="浮动应用案例"></a>浮动应用案例</h4><img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/mii.png">

<h4 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h4><img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/nav.png">

<p>注意，实际重要的导航栏中，我们不会直接用链接a 而是用 li  包含链接(li+a)的做法。</p>
<ol>
<li>li+a 语义更清晰，一看这就是有条理的列表型内容。</li>
<li>如果直接用a，搜索引擎容易辨别为有堆砌关键字嫌疑（故意堆砌关键字容易被搜索引擎有降权的风险），从而影响网站排名</li>
</ol>
<h3 id="1-6-浮动-float-的扩展"><a href="#1-6-浮动-float-的扩展" class="headerlink" title="1.6  浮动(float)的扩展"></a>1.6  浮动(float)的扩展</h3><h4 id="1-浮动元素与父盒子的关系"><a href="#1-浮动元素与父盒子的关系" class="headerlink" title="1). 浮动元素与父盒子的关系"></a>1). 浮动元素与父盒子的关系</h4><ul>
<li>子盒子的浮动参照父盒子对齐</li>
<li>不会与父盒子的边框重叠，也不会超过父盒子的内边距<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/05_父子盒子关系示意图.png">
​

</li>
</ul>
<h4 id="2-浮动元素与兄弟盒子的关系"><a href="#2-浮动元素与兄弟盒子的关系" class="headerlink" title="2). 浮动元素与兄弟盒子的关系"></a>2). 浮动元素与兄弟盒子的关系</h4><p>在一个父级盒子中，如果<strong>前一个兄弟盒子</strong>是：</p>
<ul>
<li><strong>浮动</strong>的，那么<strong>当前盒子</strong>会与前一个盒子的顶部对齐；</li>
<li><strong>普通流</strong>的，那么<strong>当前盒子</strong>会显示在前一个兄弟盒子的下方。 </li>
</ul>
<p><strong>pink老师 要你记住：</strong></p>
<blockquote>
<p>浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。</p>
</blockquote>
 <img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/two1.jpg">

<p><strong>建议</strong></p>
<p><strong>如果一个盒子里面有多个子盒子，如果其中一个盒子浮动了，其他兄弟也应该浮动。防止引起问题</strong></p>
<h2 id="2-清除浮动"><a href="#2-清除浮动" class="headerlink" title="2. 清除浮动"></a>2. 清除浮动</h2><h3 id="2-1-为什么要清除浮动"><a href="#2-1-为什么要清除浮动" class="headerlink" title="2.1 为什么要清除浮动"></a>2.1 为什么要清除浮动</h3><p>因为父级盒子很多情况下，不方便给高度，但是子盒子浮动就不占有位置，最后父级盒子高度为0，就影响了下面的标准流盒子。</p>
<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/n.jpg">





<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/no.jpg">

<ul>
<li>总结：<ul>
<li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li>
<li>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></li>
</ul>
</li>
</ul>
<h3 id="2-2-清除浮动本质"><a href="#2-2-清除浮动本质" class="headerlink" title="2.2 清除浮动本质"></a>2.2 清除浮动本质</h3><p><strong>听pink老师说清除浮动本质：</strong></p>
<p>​    <strong>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。清除浮动之后， 父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></p>
<h3 id="2-3-清除浮动的方法"><a href="#2-3-清除浮动的方法" class="headerlink" title="2.3 清除浮动的方法"></a>2.3 清除浮动的方法</h3><p>在CSS中，clear属性用于清除浮动，在这里，我们先记住清除浮动的方法，具体的原理，等我们学完css会再回头分析。</p>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择器&#123;clear:属性值;&#125;   clear 清除</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>
</tr>
<tr>
<td>right</td>
<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>
</tr>
<tr>
<td>both</td>
<td>同时清除左右两侧浮动的影响</td>
</tr>
</tbody></table>
<p>但是我们实际工作中， 几乎只用 clear: both;</p>
<h4 id="1-额外标签法-隔墙法"><a href="#1-额外标签法-隔墙法" class="headerlink" title="1).额外标签法(隔墙法)"></a>1).额外标签法(隔墙法)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">”clear:both”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>，或则其他标签br等亦可。</span><br></pre></td></tr></table></figure>

<ul>
<li>优点： 通俗易懂，书写方便</li>
<li>缺点： 添加许多无意义的标签，结构化较差。</li>
</ul>
<h4 id="2-父级添加overflow属性方法"><a href="#2-父级添加overflow属性方法" class="headerlink" title="2).父级添加overflow属性方法"></a>2).父级添加overflow属性方法</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">可以给父级添加： overflow为 hidden| auto| scroll  都可以实现。</span><br></pre></td></tr></table></figure>

<p>优点：  代码简洁</p>
<p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p>
<h4 id="3-使用after伪元素清除浮动"><a href="#3-使用after伪元素清除浮动" class="headerlink" title="3).使用after伪元素清除浮动"></a>3).使用after伪元素清除浮动</h4><p><strong>:after 方式为空元素额外标签法的升级版，好处是不用单独加标签了</strong> </p>
<p>使用方法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;  <span class="attribute">content</span>: <span class="string">""</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>: <span class="number">0</span>; <span class="attribute">clear</span>: both; <span class="attribute">visibility</span>: hidden;  &#125;   </span><br><span class="line"></span><br><span class="line">.clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</span><br></pre></td></tr></table></figure>

<ul>
<li>优点： 符合闭合浮动思想  结构语义化正确</li>
<li>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</li>
<li>代表网站： 百度、淘宝网、网易等</li>
</ul>
<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/163.png">

<h4 id="4-使用双伪元素清除浮动"><a href="#4-使用双伪元素清除浮动" class="headerlink" title="4).使用双伪元素清除浮动"></a>4).使用双伪元素清除浮动</h4><p>使用方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>优点：  代码更简洁</p>
</li>
<li><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p>
</li>
<li><p>代表网站： 小米、腾讯等</p>
</li>
</ul>
<h3 id="2-4-清除浮动总结"><a href="#2-4-清除浮动总结" class="headerlink" title="2.4 清除浮动总结"></a>2.4 清除浮动总结</h3><p><strong>pink老师告诉你我们以后什么时候用清除浮动呢？</strong></p>
<ol>
<li>父级没高度</li>
<li>子盒子浮动了</li>
<li>影响下面布局了，我们就应该清除浮动了。</li>
</ol>
<table>
<thead>
<tr>
<th>清除浮动的方式</th>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td>额外标签法（隔墙法）</td>
<td align="left">通俗易懂，书写方便</td>
<td align="left">添加许多无意义的标签，结构化较差。</td>
</tr>
<tr>
<td>父级overflow:hidden;</td>
<td align="left">书写简单</td>
<td align="left">溢出隐藏</td>
</tr>
<tr>
<td>父级after伪元素</td>
<td align="left">结构语义化正确</td>
<td align="left">由于IE6-7不支持:after，兼容性问题</td>
</tr>
<tr>
<td>父级双伪元素</td>
<td align="left">结构语义化正确</td>
<td align="left">由于IE6-7不支持:after，兼容性问题</td>
</tr>
</tbody></table>
<p>后面两种伪元素清除浮动，大家暂且会使用就好， 深入原理，我们后面学完伪元素再讲。</p>
<h2 id="pink-的秘密"><a href="#pink-的秘密" class="headerlink" title="pink 的秘密"></a>pink 的秘密</h2><h2 id="3-Photoshop-切图"><a href="#3-Photoshop-切图" class="headerlink" title="3. Photoshop 切图"></a>3. Photoshop 切图</h2><p><strong>常见的图片格式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. jpg图像格式： </span><br><span class="line">JPEG（.JPG）对色彩的信息保留较好，高清，颜色较多，我们产品类的图片经常用jpg格式的</span><br><span class="line">2. gif图像格式：</span><br><span class="line">GIF格式最多只能储存256色，所以通常用来显示简单图形及字体，但是可以保存透明背景和动画效果</span><br><span class="line">3. png图像格式</span><br><span class="line">是一种新兴的网络图形格式，结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景</span><br><span class="line">4. PSD图像格式</span><br><span class="line">PSD格式是Photoshop的专用格式，里面可以存放图层、通道、遮罩等多种设计草稿。</span><br></pre></td></tr></table></figure>

<p>PS切图   可以 分为   利用切片工具切图 以及   利用PS的插件快速切图。</p>
<h3 id="1-PS切片工具"><a href="#1-PS切片工具" class="headerlink" title="1). PS切片工具"></a>1). PS切片工具</h3><p> <img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/1498466173246.png" alt="1498466173246"></p>
<p>ps切图片，分两大步：</p>
<p><strong>1). 用切片选中图片</strong></p>
<ul>
<li><p>利用切片工具手动划出</p>
</li>
<li><p>图层菜单—新建基于图层的切片</p>
</li>
<li><p>利用辅助线 来切图 –    基于参考线的切片 </p>
<p> ​</p>
<p>  <img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/1498466734205.png" alt="1498466734205"></p>
<p> ​</p>
</li>
</ul>
<p><strong>2). 导出切片</strong></p>
<p>  文件菜单   – 存储为web设备所用格式 —-   选择  我们要的图片格式 —-  点存储  —   别忘了选中的切片</p>
<h4 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h4><p>视图菜单– 清除 辅助线/ 清除切片</p>
<h3 id="2-切图插件"><a href="#2-切图插件" class="headerlink" title="2). 切图插件"></a>2). 切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p>
<p>官网: <a href="http://www.cutterman.cn/zh/cutterman" target="_blank" rel="noopener">http://www.cutterman.cn/zh/cutterman</a></p>
<p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p>
<img src="/2020/12/26/%E6%B5%AE%E5%8A%A8/sample1.gif">

<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>CSS布局</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>vim一些用法和参数</title>
    <url>/2020/03/20/vim%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95%E5%92%8C%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>Vim是从vi发展出来的一个文本编辑器,具有代码补完、编译及可以主动的以字体颜色辨别语法正确性等丰富功能</code></pre><a id="more"></a>
<h3 id="vim打开文件使字符在命令终端显示颜色"><a href="#vim打开文件使字符在命令终端显示颜色" class="headerlink" title="vim打开文件使字符在命令终端显示颜色:"></a>vim打开文件使字符在命令终端显示颜色:</h3><pre><code>例如字符显示红色,首先在`i`插入模式下,按&quot;ctrl+v+[&quot; 会出现^[ ,写成&quot;^[[1;31mred^[[0m&quot;(1是高亮显示,31m是红色,red是你要变颜色的字符串)</code></pre><img src="/2020/03/20/vim%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95%E5%92%8C%E5%8F%82%E6%95%B0/red.JPG" class title="给你点个赞">

<h3 id="命令模式光标跳转"><a href="#命令模式光标跳转" class="headerlink" title="命令模式光标跳转:"></a>命令模式光标跳转:</h3><pre><code>1)字符间跳转: h左，i右，j下，k上，（可以在前面加数字，如3h，向左移三个字符)
2)单词间跳转: w下一个单词的词首, e当前或下一个单词的词尾，b当前或前一个单词的词尾(也可以加数字,如3w)
3)当前页跳转: H页眉，M页中间行，L页底
4)行首行尾跳转:^跳转至行首的第一个非空白字符，0跳转至行首，$跳转至行尾
5)行间移动: nG扩展模式(n=数字,指定跳到第几行)，G最后一行，gg一行
6)句间移动: ): 下一句，(: 上一句 (以一个.空格或空行为一句)
7)段落间移动: }: 下一段，{: 上一段 (一空行为一段)</code></pre><h3 id="命令模式翻屏操作"><a href="#命令模式翻屏操作" class="headerlink" title="命令模式翻屏操作"></a>命令模式翻屏操作</h3><pre><code>1)ctrl+f: 向文件尾部翻一屏
2)Ctrl+b: 向文件首部翻一屏
3)ctrl+d: 向文件尾部翻半屏
4)ctrl+u: 向文件首部翻半屏</code></pre><h3 id="命令模式操作"><a href="#命令模式操作" class="headerlink" title="命令模式操作"></a>命令模式操作</h3><pre><code>1)字符编辑:
    x: 删除光标处的字符
    nx: 删除光标处起始的n个字符
    Xp: 交换光标所在处的字符及其后面字符的位置
    ~: 转换大小写
    J: 删除当前行后的换行符
2)替换命令(r, replace):
    r: 替换光标所在处的字符
    R: 切换成 REPLACE模式
3)删除命令:
    d: 删除命令,可结合光标跳转字符,实现范围删除
    d$ 删除到行尾
    d^: 删除到非空行首
    d0: 删除到行首
    dw: 从当前光标删除至单字/单词末尾，光标 停留在下一个单词的第一位
    de: 删除单词至单词末尾,光标停留在下一个单词前面
    db: 删除到某个单词的开始位置
    dd:删除光标所在的行
    ndd:多行删除
    D:从当前光标位置一直删除到行尾,留空行,等同于d$
4)复制命令 y, yank):
    y:  复制,行为相似于d命令
    y$: 从当前光标复制末尾
    y0: 从当前光标(不包括当前光标字符)复制到行首,包括行首有空格的情况
    y^: 从当前光标(不包括当前光标字符)复制到行首,如果行首为空格,则不复制空格
    yy: 复制行
    nyy: 复制多行
    Y: 复制整行
5)改变命令(c, change):
    cc: 删除当前行并输入新内容,相当于S
    ncc: 删除多行并输入新内容
    C: 删除当前光标到行尾,并切换成插入模式</code></pre><h3 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h3><pre><code>1)如:2表示第二行，n,x(数字)表示从n开始的行到x结尾  
n,+n(如2,+3表示2到5行)，.当前行，$最后一行(.,$-1 表示当前行到倒数第二行) %全文,相当于1,$
2)/pat1/,/pat2/ 命令(d, y, w file, r file)，如：/^b/,/^c/d匹配以b开头的行到以c开头的行结束,再删除。
3)%s/旧字符/新字符/g(c询问，i忽略大小写)，也可以%s@旧字符@新字符@(#也行)</code></pre><h3 id="vim的寄存器"><a href="#vim的寄存器" class="headerlink" title="vim的寄存器"></a>vim的寄存器</h3><pre><code>1)有26(a-z)个命名寄存器和一个无命名寄存器,用于存放不同的剪贴版内容，可以不同会话间共享，如: 3&quot;ayy 表示复制3行到a寄存器中，&quot;ap表示将a寄存器内容粘贴
2)未指定将使用无命名寄存器
3)有10个数字寄存器,用0,1,…,9表示,0存放最近复制内容,1存放最近删除内容,当新的文本变更和删除时,1转存到2,2转存到3,以此类推。数字寄存器不能在不同会话间共享</code></pre><h3 id="使用多窗口"><a href="#使用多窗口" class="headerlink" title="使用多窗口"></a>使用多窗口</h3><pre><code>1)多文件分割
    vim -o|-O file1 file2…
    -o: 水平分割
    -O: 垂直分割
    在窗口间切换: ctr+ W
    在末行模式使用: sp file同样多窗口

2)单文件窗口分割:
    (先按ctrl+w,再按单个字母,如s,:split用是在末行模式)
    Ctrl+W+s,:split 水平分割
    Ctrl+W+v,:vertica 垂直分割
    ctrl+w+q: 取消相邻窗口
    ctr+w+o: 取消全部窗口
    :wqall退出</code></pre><h3 id="定制vim的工作特性"><a href="#定制vim的工作特性" class="headerlink" title="定制vim的工作特性"></a>定制vim的工作特性</h3><pre><code>1)配置文件: 永久有效
    全局: /etc/vimrc
    个人: ~/.vimrc
2)扩展模式: 当前vim进程有效
3)行号
    显示: set number简写为 set nu
    取消显示: set nonumber,简写为 set nonu
4)忽略字符的大小写
    启用: set ic
    不忽略: set noic
5)自动缩进
    启用: set ai
    禁用: set noai
6)智能缩进
    启用: smartindent 简写 set si
    禁用: set nosi
7)高亮搜索
    启用: set hlsearch
    禁用: set nohlsearch
8)语法高亮
    启用: syntax on
    禁用: syntax off
9)显示Tab和换行符^I和$显示
    启用: set list
    禁用: set nolist
10)文件格式
    启用windows格式: set fileformat=dos
    启用unix格式: set fileformat=unix
    简写: set ff=dos|unix
11)设置文本宽度
    启用: set textwidth=65 (vim only)
    禁用: set wrapmargin=15
12)设置光标所在行的标识线
    启用: set cursorline,简写cul
    禁用: set no cursorline
13)复制保留格式
    启用: set paste
    禁用: set nopaste</code></pre><blockquote>
<p>命令模式黏贴多次命令: 如黏贴100次irene,<code>100iirene 后按ESC键</code></p>
</blockquote>
<blockquote>
<p>&lt;开始位置&gt;&lt;命令&gt;&lt;结束位置&gt; 命令: y复制,d删除,gU变大写,gu小写 如<code>0y$</code>,0先到行头,y从这里开始拷贝,$拷贝到本行最后一个字符, 使用ye就是从当前位置拷贝到本单词的最后一个字符</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim命令</tag>
      </tags>
  </entry>
</search>
